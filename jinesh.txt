"use client";

import { useState, useEffect, useMemo } from "react";
import { useRouter } from "next/navigation";
import Sidebar from "../../components/FindTalents/Sidebar";
import TutorCard from "../../components/FindTalents/TutorCard";

export default function FindTalentsPage() {
  const [tutors, setTutors] = useState([]);
  const [filters, setFilters] = useState({
    selectedLocation: "ALL LOCATIONS",
    selectedSubjects: [],
    hourlyRate: 5000,
  });
  const [searchTerm, setSearchTerm] = useState("");
  const [sortOption, setSortOption] = useState("Relevance");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [snackbar, setSnackbar] = useState({ visible: false, message: "" });
  const router = useRouter();

  useEffect(() => {
    const fetchTutors = async () => {
      try {
        setLoading(true);
        const response = await fetch("https://api.vybtek.com/api/teachers");
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        if (data && Array.isArray(data)) {
          // This mapping is now corrected to match your exact JSON structure.
          const transformedTutors = data
            .filter((teacher) => teacher.teacher_profile) // Keep only users with a teacher profile
            .map((teacher) => ({
              id: teacher.id, // The main ID for the user/teacher
              teacher_profile_id: teacher.teacher_profile.id, // The ID for the profile itself
              name: teacher.name || "Unknown",
              experience:
                teacher.teacher_profile.experience
                  ?.map((exp) => `${exp.job_title} at ${exp.institute_name}`)
                  .join(", ") || "No experience listed",
              subjects: Array.isArray(teacher.teacher_profile.subjects)
                ? teacher.teacher_profile.subjects
                : [],
              rate: `₹${teacher.teacher_profile.charges_hourly || 0}`,
              rating: 0, // Placeholder
              // FIX: Your data does not have 'createdAt'. We will add a placeholder date to prevent sorting errors.
              createdAt: teacher.created_at || new Date().toISOString(),
              location: teacher.teacher_profile.city || "Location not specified",
              image: teacher.teacher_profile.profile_photo_url || null,
            }));
          setTutors(transformedTutors);
        } else {
          setTutors([]);
        }
      } catch (err) {
        console.error("Error fetching or transforming tutors:", err);
        setError("Failed to process tutor data.");
      } finally {
        setLoading(false);
      }
    };
    fetchTutors();
  }, []);

  const addToFavorites = async (tutor) => {
    // ... (Add your favorite logic back here)
    console.log("Adding to favorites:", tutor);
    return true; // Placeholder
  };
  
  const removeFromFavorites = async (tutor) => {
    // ... (Add your favorite logic back here)
    console.log("Removing from favorites:", tutor);
    return true; // Placeholder
  };

  // useMemo correctly recalculates the list when data or filters change.
  const filteredTutors = useMemo(() => {
    let processedTutors = [...tutors];

    processedTutors = processedTutors.filter((tutor) => {
        const tutorRate = parseFloat(tutor.rate.replace("₹", "")) || 0;
        const locationMatch =
          filters.selectedLocation === "ALL LOCATIONS" ||
          tutor.location === filters.selectedLocation;
        const subjectMatch =
          filters.selectedSubjects.length === 0 ||
          filters.selectedSubjects.every((subject) =>
            tutor.subjects.includes(subject)
          );
        const rateMatch = tutorRate <= filters.hourlyRate;
        const searchMatch = tutor.name.toLowerCase().includes(searchTerm.toLowerCase());
        return locationMatch && subjectMatch && rateMatch && searchMatch;
      });

    processedTutors.sort((a, b) => {
      if (sortOption === "Newest") return new Date(b.createdAt) - new Date(a.createdAt);
      if (sortOption === "Oldest") return new Date(a.createdAt) - new Date(b.createdAt);
      // Add other sorting logic like 'Rating' if needed
      return 0;
    });

    return processedTutors;
  }, [tutors, filters, searchTerm, sortOption]);

  return (
    <div className="min-h-screen py-16 bg-gray-100">
      <div className="container mx-auto p-6 flex flex-col md:flex-row gap-6">
        <Sidebar onFilterChange={setFilters} />
        <div className="flex-1">
          <h1 className="text-3xl font-bold text-gray-800 mb-6">FIND TUTORS</h1>
          <div className="flex flex-col sm:flex-row justify-between mb-6 gap-4">
            <input
              type="text"
              placeholder="Find tutors by name"
              className="flex-1 p-3 border rounded-lg"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <select
              className="p-3 border rounded-lg"
              value={sortOption}
              onChange={(e) => setSortOption(e.TutorCardvalue)}
            >
              <option>Relevance</option>
              <option>Newest</option>
              <option>Oldest</option>
            </select>
          </div>
          <div className="space-y-4">
            {loading ? (
              <p className="text-center text-blue-600">Loading Tutors...</p>
            ) : error ? (
              <p className="text-center text-red-600">{error}</p>
            ) : filteredTutors.length > 0 ? (
              filteredTutors.map((tutor) => (
                <TutorCard
                  key={tutor.id}
                  tutor={tutor}
                  addToFavorites={addToFavorites}
                  removeFromFavorites={removeFromFavorites}
                />
              ))
            ) : (
              <p className="text-center text-gray-600">
                No tutors found matching your criteria.
              </p>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}















"use client";
import { useRouter } from "next/navigation";
import { useState, useEffect } from "react";

const TutorCard = ({
  teacher_id,
  name,
  experience,
  subjects,
  rate,
  rating,
  image,
}) => {
  const [isFavorited, setIsFavorited] = useState(false);
  const [snackbar, setSnackbar] = useState({ visible: false, message: "" });
  const router = useRouter();

  useEffect(() => {
    const fetchFavoriteStatus = async () => {
      const token = localStorage.getItem("authToken");
      if (token) {
        try {
          const response = await fetch(
            "https://api.vybtek.com/api/teachers/favorites",
            {
              headers: { Authorization: `Bearer ${token}` },
            }
          );
          const data = await response.json();
          if (data.success && Array.isArray(data.favorites)) {
            setIsFavorited(data.favorites.includes(teacher_id));
          } else {
            console.log("GET API response:", data);
          }
        } catch (error) {
          console.error("Error fetching favorite status:", error);
        }
      }
    };
    fetchFavoriteStatus();
  }, [teacher_id]);

  const handleViewDetails = () => {
    const tutorSlug = name.replace(/\s+/g, "-").toLowerCase();
    router.push(`/findtalents/${tutorSlug}`);
  };

  const handleFavoriteToggle = async (e) => {
    e.stopPropagation();
    const token = localStorage.getItem("authToken");
    if (!token) {
      setSnackbar({
        visible: true,
        message: "Please log in to favorite tutors.",
      });
      setTimeout(() => router.push("/login"), 2000);
      return;
    }

    try {
      if (isFavorited) {
        const response = await fetch(
          `https://api.vybtek.com/api/teachers/${teacher_id}/favorites`,
          {
            method: "DELETE",
            headers: {
              Accept: "application/json",
              Authorization: `Bearer ${token}`,
            },
          }
        );
        const data = await response.json();
        if (data.success) {
          setIsFavorited(false);
          setSnackbar({
            visible: true,
            message: "Tutor removed from favorites!",
          });
          setTimeout(() => setSnackbar({ visible: false, message: "" }), 3000);
        } else {
          throw new Error(data.message || "Failed to remove from favorites.");
        }
      } else {
        const response = await fetch(
          `https://api.vybtek.com/api/teachers/${teacher_id}/favorite`,
          {
            method: "POST",
            headers: {
              Accept: "application/json",
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
            },
            body: JSON.stringify({ teacher_profile: teacher_id }),
          }
        );
        const data = await response.json();
        if (data.success) {
          setIsFavorited(true);
          setSnackbar({
            visible: true,
            message: "Tutor added to favorites!",
          });
          setTimeout(() => setSnackbar({ visible: false, message: "" }), 3000);
        } else {
          throw new Error(data.message || "Failed to add to favorites.");
        }
      }
    } catch (error) {
      console.error("Error updating favorite:", error.message);
      setSnackbar({
        visible: true,
        message: error.message || "Failed to update favorites. Please try again.",
      });
      setTimeout(() => setSnackbar({ visible: false, message: "" }), 3000);
    }
  };

  return (
    <div
      onClick={handleViewDetails}
      role="button"
      tabIndex={0}
      onKeyDown={(e) => e.key === "Enter" && handleViewDetails()}
      className="text-left bg-white rounded-xl shadow-lg border border-gray-100 p-6 hover:shadow-xl transition-all duration-300 hover:-translate-y-1 cursor-pointer focus:outline-none focus:ring-2 focus:ring-sky-500"
    >
      <div className="flex flex-col lg:flex-row lg:items-start lg:justify-between gap-6">
        <div className="flex-1 space-y-4">
          <h3 className="text-xl font-bold text-gray-900 leading-tight">
            {name}
          </h3>
          <p className="text-sm text-gray-600">{experience}</p>
          <div className="flex flex-wrap gap-2">
            {Array.isArray(subjects) && subjects.length > 0 ? (
              subjects.map((subject, index) => (
                <span
                  key={index}
                  className="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-1 rounded"
                >
                  {subject}
                </span>
              ))
            ) : (
              <span className="text-gray-500 text-xs">No subjects listed</span>
            )}
          </div>
          <p className="text-sm text-gray-600">
            Rate: <span className="text-green-600 font-medium">{rate}/hr</span>
          </p>
          <p className="text-sm text-gray-600">
            Rating: <span className="text-yellow-500 font-medium">{rating} ★</span>
          </p>
        </div>
        <div className="flex lg:flex-col items-center lg:items-end gap-4">
          <button
            onClick={(e) => {
              e.stopPropagation();
              handleViewDetails();
            }}
            className="w-full lg:w-auto cursor-pointer bg-blue-600 text-white px-6 py-2.5 rounded-lg font-semibold hover:bg-blue-700 transition-colors duration-200"
            suppressHydrationWarning
          >
            Hire a Tutor
          </button>
          <button
            onClick={handleFavoriteToggle}
            className={`p-2 cursor-pointer transition-colors duration-200 ${
              isFavorited ? "text-red-500" : "text-gray-400 hover:text-red-500"
            }`}
            aria-label={isFavorited ? "Remove from favorites" : "Add to favorites"}
            suppressHydrationWarning
          >
            <svg
              className="w-5 h-5"
              fill={isFavorited ? "currentColor" : "none"}
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
              />
            </svg>
          </button>
        </div>
      </div>
      {snackbar.visible && (
        <div className="fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-red-600 text-white px-6 py-3 rounded-lg shadow-lg flex items-center max-w-md mx-4">
          <span>{snackbar.message}</span>
          <button
            onClick={() => setSnackbar({ visible: false, message: "" })}
            className="ml-4 text-white hover:text-blue-200"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                clipRule="evenodd"
              />
            </svg>
          </button>
        </div>
      )}
    </div>
  );
};

export default TutorCard;
