"use client";

import React, { useState, useEffect, useCallback } from "react";
import { useRouter } from "next/navigation";
import {
  FaUser,
  FaEdit,
  FaTrash,
  FaMapMarkerAlt,
  FaStar,
  FaCopy,
  FaShareAlt,
  FaMoneyBillWave,
  FaGraduationCap,
  FaChalkboardTeacher,
  FaTrophy,
  FaGlobe,
  FaBriefcase,
  FaCalendarAlt,
  FaClock,
  FaFacebook,
  FaTwitter,
  FaLinkedin,
  FaTimes,
  FaCheck,
  FaPlus,
  FaSpinner,
} from "react-icons/fa";

// API Base URL - Update this to match your backend
const API_BASE_URL = "https://api.vybtek.com/api";

// Utility function to get auth token
const getToken = (setToast) => {
  const token = localStorage.getItem("authToken");
  if (!token) {
    setToast({
      type: "error",
      message: "Authentication token not found. Please login.",
    });
    return null;
  }
  return token;
};

// --- API SERVICE FUNCTIONS ---

// Get teacher ID from user ID
const fetchTeacherIdByUserId = async (userId, setToast) => {
  const token = getToken(setToast);
  if (!token) return null;
  const res = await fetch(`${API_BASE_URL}/teachers/user/${userId}`, {
    headers: { Authorization: `Bearer ${token}` },
  });
  if (!res.ok)
    throw new Error(`Failed to fetch teacher by user ID: ${res.status}`);
  const data = await res.json();
  return data.teacher_id;
};

// Fetch full teacher profile
const fetchTeacherProfile = async (teacherId, setToast) => {
  const token = getToken(setToast);
  if (!token) throw new Error("Authentication token not found");
  const res = await fetch(
    `${API_BASE_URL}/teachers/getfullprofile/${teacherId}`,
    {
      headers: { Authorization: `Bearer ${token}` },
    }
  );
  if (!res.ok)
    throw new Error(`Failed to fetch teacher profile: ${res.status}`);
  const response = await res.json();
  if (!response.success) throw new Error("Failed to fetch profile data");
  return response.data;
};

// Update teacher profile
const updateTeacherProfile = async (teacherId, data, setToast) => {
  const token = getToken(setToast);
  if (!token) throw new Error("Authentication token not found");
  const res = await fetch(`${API_BASE_URL}/teachers/${teacherId}`, {
    method: "PATCH",
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  });
  if (!res.ok)
    throw new Error(`Failed to update teacher profile: ${res.status}`);
  return await res.json();
};

// Teaching experience operations
const addTeachingExperience = async (teacherId, data, setToast) => {
  const token = getToken(setToast);
  if (!token) throw new Error("Authentication token not found");
  const payload = { ...data, teacher_id: teacherId };
  const res = await fetch(`${API_BASE_URL}/teacher-experiences/`, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify(payload),
  });
  if (!res.ok)
    throw new Error(`Failed to add teaching experience: ${res.status}`);
  return await res.json();
};

const updateTeachingExperience = async (experienceId, data, setToast) => {
  const token = getToken(setToast);
  if (!token) throw new Error("Authentication token not found");
  const res = await fetch(
    `${API_BASE_URL}/teacher-experiences/${experienceId}`,
    {
      method: "PATCH",
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    }
  );
  if (!res.ok)
    throw new Error(`Failed to update teaching experience: ${res.status}`);
  return await res.json();
};

const deleteTeachingExperience = async (experienceId, setToast) => {
  const token = getToken(setToast);
  if (!token) throw new Error("Authentication token not found");
  const res = await fetch(
    `${API_BASE_URL}/teacher-experiences/${experienceId}`,
    {
      method: "DELETE",
      headers: { Authorization: `Bearer ${token}` },
    }
  );
  if (!res.ok)
    throw new Error(`Failed to delete teaching experience: ${res.status}`);
  return true;
};

// Education operations
const addEducation = async (teacherId, data, setToast) => {
  const token = getToken(setToast);
  if (!token) throw new Error("Authentication token not found");
  const payload = { ...data, teacher_id: teacherId };
  const res = await fetch(`${API_BASE_URL}/teacher-educations/`, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify(payload),
  });
  if (!res.ok) throw new Error(`Failed to add education: ${res.status}`);
  return await res.json();
};

const updateEducation = async (educationId, data, setToast) => {
  const token = getToken(setToast);
  if (!token) throw new Error("Authentication token not found");
  const res = await fetch(`${API_BASE_URL}/teacher-educations/${educationId}`, {
    method: "PATCH",
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error(`Failed to update education: ${res.status}`);
  return await res.json();
};

const deleteEducation = async (educationId, setToast) => {
  const token = getToken(setToast);
  if (!token) throw new Error("Authentication token not found");
  const res = await fetch(`${API_BASE_URL}/teacher-educations/${educationId}`, {
    method: "DELETE",
    headers: { Authorization: `Bearer ${token}` },
  });
  if (!res.ok) throw new Error(`Failed to delete education: ${res.status}`);
  return true;
};

// Awards operations
const addAward = async (teacherId, data, setToast) => {
  const token = getToken(setToast);
  if (!token) throw new Error("Authentication token not found");
  const payload = { ...data, teacher_id: teacherId };
  const res = await fetch(`${API_BASE_URL}/teacher-awards/`, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify(payload),
  });
  if (!res.ok) throw new Error(`Failed to add award: ${res.status}`);
  return await res.json();
};

const updateAward = async (awardId, data, setToast) => {
  const token = getToken(setToast);
  if (!token) throw new Error("Authentication token not found");
  const res = await fetch(`${API_BASE_URL}/teacher-awards/${awardId}`, {
    method: "PATCH",
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  });
  if (!res.ok) throw new Error(`Failed to update award: ${res.status}`);
  return await res.json();
};

const deleteAward = async (awardId, setToast) => {
  const token = getToken(setToast);
  if (!token) throw new Error("Authentication token not found");
  const res = await fetch(`${API_BASE_URL}/teacher-awards/${awardId}`, {
    method: "DELETE",
    headers: { Authorization: `Bearer ${token}` },
  });
  if (!res.ok) throw new Error(`Failed to delete award: ${res.status}`);
  return true;
};

// Subjects operations
const fetchAvailableSubjects = async (setToast) => {
  const token = getToken(setToast);
  if (!token) throw new Error("Authentication token not found");
  const res = await fetch(`${API_BASE_URL}/subjects/`, {
    headers: { Authorization: `Bearer ${token}` },
  });
  if (!res.ok)
    throw new Error(`Failed to fetch available subjects: ${res.status}`);
  const data = await res.json();
  return Array.isArray(data) ? data : [];
};

const addTeacherSubject = async (teacherId, subjectId, setToast) => {
  const token = getToken(setToast);
  if (!token) throw new Error("Authentication token not found");
  const res = await fetch(`${API_BASE_URL}/teacher-subjects/`, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ teacher_id: teacherId, subject_id: subjectId }),
  });
  if (!res.ok) throw new Error(`Failed to assign subject: ${res.status}`);
  return await res.json();
};

const deleteTeacherSubject = async (assignmentId, setToast) => {
  const token = getToken(setToast);
  if (!token) throw new Error("Authentication token not found");
  const res = await fetch(`${API_BASE_URL}/teacher-subjects/${assignmentId}`, {
    method: "DELETE",
    headers: { Authorization: `Bearer ${token}` },
  });
  if (!res.ok) throw new Error(`Failed to remove subject: ${res.status}`);
  return true;
};

// --- VALIDATION UTILITIES ---

const validateField = (section, field, value, modalData = {}) => {
  let error = "";

  // Utility to safely check if value is a string and trim it
  const safeTrim = (val) => (typeof val === "string" && val ? val.trim() : "");

  if (section === "title" && (!value || safeTrim(value) === "")) {
    error = "Professional title is required";
  }

  if (
    section === "about" &&
    value &&
    typeof value === "string" &&
    value.length > 500
  ) {
    error = "About section cannot exceed 500 characters";
  }

  if (
    section === "subjects" &&
    (!value || !Array.isArray(value) || value.length === 0)
  ) {
    error = "At least one subject is required";
  }

  if (section === "teaching") {
    if (field === "institute_name" && (!value || safeTrim(value) === "")) {
      error = "Institute name is required";
    }
    if (field === "job_title" && (!value || safeTrim(value) === "")) {
      error = "Job title is required";
    }
    if (field === "city" && (!value || safeTrim(value) === "")) {
      error = "City is required";
    }
    if (field === "state" && (!value || safeTrim(value) === "")) {
      error = "State is required";
    }
    if (field === "teaching_role" && (!value || safeTrim(value) === "")) {
      error = "Teaching role is required";
    }
    if (field === "period_from_month" && (!value || safeTrim(value) === "")) {
      error = "Start month is required";
    }
    if (field === "period_from_year") {
      const strValue = value != null ? String(value) : "";
      if (!strValue || safeTrim(strValue) === "") {
        error = "Start year is required";
      } else if (
        isNaN(strValue) ||
        strValue < 1950 ||
        strValue > new Date().getFullYear()
      ) {
        error = `Start year must be between 1950 and ${new Date().getFullYear()}`;
      }
    }
    if (!modalData.currently_work_here) {
      if (field === "period_to_month" && (!value || safeTrim(value) === "")) {
        error = "End month is required";
      }
      if (field === "period_to_year") {
        const strValue = value != null ? String(value) : "";
        if (!strValue || safeTrim(strValue) === "") {
          error = "End year is required";
        } else if (
          isNaN(strValue) ||
          strValue < 1950 ||
          strValue > new Date().getFullYear()
        ) {
          error = `End year must be between 1950 and ${new Date().getFullYear()}`;
        } else if (
          modalData.period_from_year &&
          Number(strValue) < Number(modalData.period_from_year)
        ) {
          error = "End year cannot be before start year";
        }
      }
    }
  }

  if (section === "education") {
    if (field === "institution" && (!value || safeTrim(value) === "")) {
      error = "Institution name is required";
    }
    if (field === "from_year") {
      const strValue = value != null ? String(value) : "";
      if (!strValue || safeTrim(strValue) === "") {
        error = "Start year is required";
      } else if (
        isNaN(strValue) ||
        strValue < 1950 ||
        strValue > new Date().getFullYear()
      ) {
        error = `Start year must be between 1950 and ${new Date().getFullYear()}`;
      }
    }
    if (field === "to_year") {
      const strValue = value != null ? String(value) : "";
      if (!strValue || safeTrim(strValue) === "") {
        error = "End year is required";
      } else if (
        isNaN(strValue) ||
        strValue < 1950 ||
        strValue > new Date().getFullYear() + 10
      ) {
        error = `End year must be between 1950 and ${
          new Date().getFullYear() + 10
        }`;
      } else if (
        modalData.from_year &&
        Number(strValue) < Number(modalData.from_year)
      ) {
        error = "End year cannot be before start year";
      }
    }
  }

  if (section === "awards") {
    if (field === "title" && (!value || safeTrim(value) === "")) {
      error = "Award title is required";
    }
  }

  if (section === "location") {
    if (field === "street" && (!value || safeTrim(value) === "")) {
      error = "Street address is required";
    }
    if (field === "city" && (!value || safeTrim(value) === "")) {
      error = "City is required";
    }
  }

  if (section === "charges") {
    if (
      field === "charges_hourly" &&
      value != null &&
      (isNaN(value) || Number(value) < 0)
    ) {
      error = "Hourly rate must be a positive number";
    }
    if (
      field === "charges_monthly" &&
      value != null &&
      (isNaN(value) || Number(value) < 0)
    ) {
      error = "Monthly rate must be a positive number";
    }
  }

  if (section === "mode" && (!value || safeTrim(value) === "")) {
    error = "Teaching mode is required";
  }

  return error;
};

// --- UI COMPONENTS ---

// Toast Notification Component
function Toast({ message, type = "info", onClose }) {
  useEffect(() => {
    const timer = setTimeout(onClose, 4000);
    return () => clearTimeout(timer);
  }, [onClose]);

  const bgColor =
    type === "error"
      ? "bg-red-600"
      : type === "success"
      ? "bg-green-600"
      : "bg-blue-600";

  return (
    <div
      className={`${bgColor} text-white px-6 py-4 fixed bottom-5 right-5 rounded-lg shadow-lg cursor-pointer z-50 flex items-center gap-3 max-w-sm`}
      onClick={onClose}
      role="alert"
      aria-live="assertive"
    >
      <div>
        {type === "success" && <FaCheck className="text-white" />}
        {type === "error" && <FaTimes className="text-white" />}
      </div>
      <span>{message}</span>
    </div>
  );
}

// Modal Component
function Modal({ isOpen, title, onClose, onSave, children, loading = false }) {
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = "hidden";
    } else {
      document.body.style.overflow = "";
    }
    return () => {
      document.body.style.overflow = "";
    };
  }, [isOpen]);

  if (!isOpen) return null;

  return (
    <>
      <div
        className="fixed inset-0 bg-black bg-opacity-50 z-40"
        onClick={onClose}
        aria-hidden="true"
      />
      <div className="fixed inset-0 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-hidden shadow-xl">
          <header className="px-6 py-4 bg-gray-50 border-b flex justify-between items-center">
            <h3 className="text-xl font-semibold text-gray-800">{title}</h3>
            <button
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700 transition-colors"
              aria-label="Close modal"
            >
              <FaTimes size={20} />
            </button>
          </header>
          <div className="px-6 py-4 max-h-[calc(90vh-8rem)] overflow-y-auto">
            {children}
          </div>
          <footer className="px-6 py-4 bg-gray-50 border-t flex justify-end gap-3">
            <button
              type="button"
              className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-100 transition-colors"
              onClick={onClose}
              disabled={loading}
            >
              Cancel
            </button>
            <button
              type="button"
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors flex items-center gap-2 disabled:opacity-50"
              onClick={onSave}
              disabled={loading}
            >
              {loading ? <FaSpinner className="animate-spin" /> : <FaCheck />}
              Save
            </button>
          </footer>
        </div>
      </div>
    </>
  );
}

// Sidebar Component
function Sidebar({
  profile,
  location,
  charges,
  subjects,
  mode,
  onEdit,
  onCopy,
}) {
  const calculateProfileCompleteness = () => {
    const fields = [
      profile.title,
      profile.about,
      subjects.length > 0,
      location.street,
      charges.charges_hourly,
      charges.charges_monthly,
      mode,
    ];
    const filledFields = fields.filter((field) => field && field !== "").length;
    return Math.round((filledFields / fields.length) * 100);
  };

  const quickStats = [
    {
      label: "Hourly Rate",
      value: charges.charges_hourly
        ? `₹${charges.charges_hourly}/hr`
        : "Not set",
      icon: FaMoneyBillWave,
      editKey: "charges",
    },
    {
      label: "Monthly Rate",
      value: charges.charges_monthly
        ? `₹${charges.charges_monthly}/month`
        : "Not set",
      icon: FaMoneyBillWave,
      editKey: "charges",
    },
    {
      label: "Teaching Mode",
      value: mode ? mode.charAt(0).toUpperCase() + mode.slice(1) : "Not set",
      icon: FaGlobe,
      editKey: "mode",
    },
  ];

  return (
    <aside className="w-full md:w-96 bg-white border-l border-gray-200 sticky top-0 max-h-screen overflow-y-auto">
      <div className="p-6 space-y-6">
        {/* Quick Stats */}
        <div className="space-y-4">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">
            Quick Info
          </h3>
          {quickStats.map(({ label, value, icon: Icon, editKey }) => (
            <div
              key={label}
              className="flex items-center justify-between p-4 bg-gray-50 rounded-lg"
            >
              <div className="flex items-center gap-3">
                <Icon className="text-blue-600" size={20} />
                <div>
                  <p className="font-medium text-gray-800">{label}</p>
                  <p className="text-sm text-gray-600">{value}</p>
                </div>
              </div>
              <button
                onClick={() => onEdit(editKey)}
                className="text-blue-600 hover:text-blue-800 transition-colors"
                aria-label={`Edit ${label}`}
              >
                <FaEdit size={16} />
              </button>
            </div>
          ))}
        </div>

        {/* Profile Stats */}
        <div className="p-4 bg-blue-50 rounded-lg">
          <h4 className="font-semibold text-blue-800 mb-3">
            Profile Completeness
          </h4>
          <div className="space-y-2">
            <div className="flex justify-between text-sm">
              <span>Profile sections filled</span>
              <span className="font-medium">
                {calculateProfileCompleteness()}%
              </span>
            </div>
            <div className="w-full bg-blue-200 rounded-full h-2">
              <div
                className="bg-blue-600 h-2 rounded-full"
                style={{ width: `${calculateProfileCompleteness()}%` }}
              ></div>
            </div>
          </div>
        </div>

        {/* Share Profile */}
        <div>
          <h4 className="text-lg font-semibold mb-3 flex items-center gap-2">
            <FaShareAlt className="text-blue-600" />
            Share Profile
          </h4>
          <div className="flex gap-2 mb-4">
            <input
              type="text"
              readOnly
              className="flex-1 px-3 py-2 border border-gray-300 rounded-l-md text-sm bg-gray-50"
              value={`https://addisedu.com/tutor/${profile.id || "teacher-id"}`}
              aria-label="Profile share URL"
            />
            <button
              onClick={onCopy}
              className="px-4 py-2 bg-blue-600 text-white rounded-r-md hover:bg-blue-700 transition-colors"
              title="Copy profile link"
              aria-label="Copy profile link"
            >
              <FaCopy />
            </button>
          </div>
          <div className="flex gap-3">
            <button
              className="p-2 bg-blue-100 text-blue-600 rounded-full hover:bg-blue-200 transition-colors"
              aria-label="Share on Facebook"
            >
              <FaFacebook size={18} />
            </button>
            <button
              className="p-2 bg-blue-100 text-blue-600 rounded-full hover:bg-blue-200 transition-colors"
              aria-label="Share on Twitter"
            >
              <FaTwitter size={18} />
            </button>
            <button
              className="p-2 bg-blue-100 text-blue-600 rounded-full hover:bg-blue-200 transition-colors"
              aria-label="Share on LinkedIn"
            >
              <FaLinkedin size={18} />
            </button>
          </div>
        </div>
      </div>
    </aside>
  );
}

// Experience Item Component
function ExperienceItem({
  title,
  subtitle,
  period,
  description,
  isLast,
  onEdit,
  onDelete,
  id,
}) {
  return (
    <div
      className={`group relative ${
        !isLast ? "pb-6 mb-6 border-b border-gray-100" : ""
      }`}
    >
      <div className="flex gap-4">
        <div className="flex flex-col items-center">
          <div className="w-3 h-3 bg-blue-600 rounded-full flex-shrink-0 mt-1.5"></div>
          {!isLast && <div className="w-px flex-1 bg-gray-200 mt-2"></div>}
        </div>
        <div className="flex-1 min-w-0">
          <h4 className="font-semibold text-gray-900">{title}</h4>
          {subtitle && <p className="text-gray-600 text-sm mt-1">{subtitle}</p>}
          {period && <p className="text-gray-500 text-sm mt-1">{period}</p>}
          {description && (
            <p className="text-gray-700 text-sm mt-3 leading-relaxed">
              {description}
            </p>
          )}
        </div>
        <div className="absolute top-0 right-0 flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity">
          {onEdit && (
            <button
              onClick={() => onEdit(id)}
              className="p-1 text-blue-600 hover:text-blue-800 transition-colors"
              aria-label="Edit item"
            >
              <FaEdit size={14} />
            </button>
          )}
          {onDelete && (
            <button
              onClick={() => onDelete(id)}
              className="p-1 text-red-600 hover:text-red-800 transition-colors"
              aria-label="Delete item"
            >
              <FaTrash size={14} />
            </button>
          )}
        </div>
      </div>
    </div>
  );
}

// Section Card Component
function SectionCard({
  title,
  children,
  sectionKey,
  onEdit,
  className = "",
  icon,
}) {
  const defaultIcons = {
    about: FaUser,
    subjects: FaChalkboardTeacher,
    teaching: FaBriefcase,
    education: FaGraduationCap,
    awards: FaTrophy,
    location: FaMapMarkerAlt,
    preferred_classes: FaChalkboardTeacher,
    categories: FaChalkboardTeacher,
    default: FaGlobe,
  };

  const IconComponent =
    icon || defaultIcons[sectionKey] || defaultIcons.default;

  return (
    <div
      className={`bg-white rounded-xl shadow-sm border border-gray-100 p-6 ${className}`}
    >
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-3">
          <IconComponent className="text-blue-600" size={20} />
          <h2 className="text-xl font-semibold text-gray-800">{title}</h2>
        </div>
        {onEdit && (
          <button
            onClick={() => onEdit(sectionKey)}
            className="flex items-center gap-2 px-3 py-1.5 text-blue-600 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors text-sm font-medium"
            aria-label={`Edit ${title}`}
          >
            <FaEdit size={14} />
            Edit
          </button>
        )}
      </div>
      {children}
    </div>
  );
}

// Profile Header Component
function ProfileHeader({ name, title, onEdit }) {
  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6 mb-6">
      <div className="flex flex-col md:flex-row items-start md:items-center gap-6">
        <div className="relative">
          <div className="w-24 h-24 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center text-white text-4xl">
            <FaUser />
          </div>
          <div className="absolute -bottom-1 -right-1 w-8 h-8 bg-green-500 rounded-full border-4 border-white flex items-center justify-center">
            <div className="w-2 h-2 bg-white rounded-full"></div>
          </div>
        </div>
        <div className="flex-1">
          <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-3">
            <div>
              <h1 className="text-3xl font-bold text-gray-800">
                {name || "Teacher"}
              </h1>
              <p className="text-gray-600 mt-1">
                {title || "No professional title added"}
              </p>
            </div>
            <button
              onClick={() => onEdit("title")}
              className="flex items-center gap-2 px-4 py-2 text-blue-600 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors font-medium"
              aria-label="Edit title"
            >
              <FaEdit size={16} />
              Edit Title
            </button>
          </div>
          <div className="flex items-center mt-4">
            <div className="flex">
              {[...Array(5)].map((_, i) => (
                <FaStar key={i} className="w-5 h-5 text-yellow-400" />
              ))}
            </div>
            <span className="ml-2 text-gray-600">5.0 (12 reviews)</span>
          </div>
        </div>
      </div>
    </div>
  );
}

// Edit Modal Content Component
function EditModalContent({
  section,
  modalData,
  errors,
  onChange,
  subjects = [],
}) {
  if (!modalData) return <div>Loading...</div>;

  const handleInputChange = (field) => (e) => {
    onChange(field, e.target.value);
  };

  const handleCheckboxChange = (field) => (e) => {
    onChange(field, e.target.checked);
  };

  if (section === "title") {
    return (
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Professional Title
          </label>
          <input
            type="text"
            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
              errors.title ? "border-red-500" : "border-gray-300"
            }`}
            value={modalData || ""}
            onChange={handleInputChange("title")}
            placeholder="e.g., Senior Mathematics Teacher"
            aria-invalid={!!errors.title}
            aria-describedby={errors.title ? "title-error" : undefined}
          />
          {errors.title && (
            <p id="title-error" className="text-red-600 text-sm mt-1">
              {errors.title}
            </p>
          )}
        </div>
      </div>
    );
  }

  if (section === "about") {
    return (
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            About You
          </label>
          <textarea
            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
              errors.about ? "border-red-500" : "border-gray-300"
            }`}
            value={modalData || ""}
            onChange={handleInputChange("about")}
            rows={6}
            maxLength={500}
            placeholder="Tell students about yourself, your teaching philosophy, and experience..."
            aria-invalid={!!errors.about}
            aria-describedby={errors.about ? "about-error" : undefined}
          />
          <div className="flex justify-between items-center mt-1">
            {errors.about ? (
              <p id="about-error" className="text-red-600 text-sm">
                {errors.about}
              </p>
            ) : (
              <div></div>
            )}
            <p className="text-gray-500 text-sm">
              {500 - (modalData?.length || 0)} characters remaining
            </p>
          </div>
        </div>
      </div>
    );
  }

  if (section === "subjects") {
    return (
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Select Subjects You Teach
          </label>
          {Array.isArray(subjects) && subjects.length > 0 ? (
            <div className="grid grid-cols-2 gap-3 max-h-80 overflow-y-auto p-3 border border-gray-300 rounded-md">
              {subjects.map((subject) => (
                <label
                  key={subject.id}
                  className="flex items-center space-x-2 cursor-pointer"
                >
                  <input
                    type="checkbox"
                    checked={modalData?.includes(subject.id) || false}
                    onChange={(e) => {
                      const currentSubjects = modalData || [];
                      if (e.target.checked) {
                        onChange("subjects", [...currentSubjects, subject.id]);
                      } else {
                        onChange(
                          "subjects",
                          currentSubjects.filter((id) => id !== subject.id)
                        );
                      }
                    }}
                    className="text-blue-600 focus:ring-blue-500"
                  />
                  <span className="text-sm text-gray-700">{subject.name}</span>
                </label>
              ))}
            </div>
          ) : (
            <p className="text-gray-500 italic">
              No subjects available. Please try again later.
            </p>
          )}
          {errors.subjects && (
            <p className="text-red-600 text-sm mt-1">{errors.subjects}</p>
          )}
        </div>
      </div>
    );
  }

  if (section === "teaching") {
    return (
      <div className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Institute Name *
            </label>
            <input
              type="text"
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                errors.institute_name ? "border-red-500" : "border-gray-300"
              }`}
              value={modalData?.institute_name || ""}
              onChange={handleInputChange("institute_name")}
              aria-invalid={!!errors.institute_name}
              aria-describedby={
                errors.institute_name ? "institute-name-error" : undefined
              }
            />
            {errors.institute_name && (
              <p
                id="institute-name-error"
                className="text-red-600 text-sm mt-1"
              >
                {errors.institute_name}
              </p>
            )}
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Job Title *
            </label>
            <input
              type="text"
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                errors.job_title ? "border-red-500" : "border-gray-300"
              }`}
              value={modalData?.job_title || ""}
              onChange={handleInputChange("job_title")}
              aria-invalid={!!errors.job_title}
              aria-describedby={
                errors.job_title ? "job-title-error" : undefined
              }
            />
            {errors.job_title && (
              <p id="job-title-error" className="text-red-600 text-sm mt-1">
                {errors.job_title}
              </p>
            )}
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              City *
            </label>
            <input
              type="text"
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                errors.city ? "border-red-500" : "border-gray-300"
              }`}
              value={modalData?.city || ""}
              onChange={handleInputChange("city")}
              aria-invalid={!!errors.city}
              aria-describedby={errors.city ? "city-error" : undefined}
            />
            {errors.city && (
              <p id="city-error" className="text-red-600 text-sm mt-1">
                {errors.city}
              </p>
            )}
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              State *
            </label>
            <input
              type="text"
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                errors.state ? "border-red-500" : "border-gray-300"
              }`}
              value={modalData?.state || ""}
              onChange={handleInputChange("state")}
              aria-invalid={!!errors.state}
              aria-describedby={errors.state ? "state-error" : undefined}
            />
            {errors.state && (
              <p id="state-error" className="text-red-600 text-sm mt-1">
                {errors.state}
              </p>
            )}
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Teaching Role *
          </label>
          <select
            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
              errors.teaching_role ? "border-red-500" : "border-gray-300"
            }`}
            value={modalData?.teaching_role || ""}
            onChange={handleInputChange("teaching_role")}
            aria-invalid={!!errors.teaching_role}
            aria-describedby={
              errors.teaching_role ? "teaching-role-error" : undefined
            }
          >
            <option value="">Select role</option>
            <option value="teacher">Teacher</option>
            <option value="assistant_teacher">Assistant Teacher</option>
            <option value="head_teacher">Head Teacher</option>
            <option value="principal">Principal</option>
            <option value="tutor">Private Tutor</option>
          </select>
          {errors.teaching_role && (
            <p id="teaching-role-error" className="text-red-600 text-sm mt-1">
              {errors.teaching_role}
            </p>
          )}
        </div>

        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Start Month *
            </label>
            <select
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                errors.period_from_month ? "border-red-500" : "border-gray-300"
              }`}
              value={modalData?.period_from_month || ""}
              onChange={handleInputChange("period_from_month")}
              aria-invalid={!!errors.period_from_month}
              aria-describedby={
                errors.period_from_month ? "period-from-month-error" : undefined
              }
            >
              <option value="">Month</option>
              {[
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December",
              ].map((month) => (
                <option key={month} value={month}>
                  {month}
                </option>
              ))}
            </select>
            {errors.period_from_month && (
              <p
                id="period-from-month-error"
                className="text-red-600 text-sm mt-1"
              >
                {errors.period_from_month}
              </p>
            )}
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Start Year *
            </label>
            <input
              type="number"
              min="1950"
              max={new Date().getFullYear()}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                errors.period_from_year ? "border-red-500" : "border-gray-300"
              }`}
              value={modalData?.period_from_year || ""}
              onChange={handleInputChange("period_from_year")}
              aria-invalid={!!errors.period_from_year}
              aria-describedby={
                errors.period_from_year ? "period-from-year-error" : undefined
              }
            />
            {errors.period_from_year && (
              <p
                id="period-from-year-error"
                className="text-red-600 text-sm mt-1"
              >
                {errors.period_from_year}
              </p>
            )}
          </div>
          {!modalData?.currently_work_here && (
            <>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  End Month *
                </label>
                <select
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors.period_to_month
                      ? "border-red-500"
                      : "border-gray-300"
                  }`}
                  value={modalData?.period_to_month || ""}
                  onChange={handleInputChange("period_to_month")}
                  aria-invalid={!!errors.period_to_month}
                  aria-describedby={
                    errors.period_to_month ? "period-to-month-error" : undefined
                  }
                >
                  <option value="">Month</option>
                  {[
                    "January",
                    "February",
                    "March",
                    "April",
                    "May",
                    "June",
                    "July",
                    "August",
                    "September",
                    "October",
                    "November",
                    "December",
                  ].map((month) => (
                    <option key={month} value={month}>
                      {month}
                    </option>
                  ))}
                </select>
                {errors.period_to_month && (
                  <p
                    id="period-to-month-error"
                    className="text-red-600 text-sm mt-1"
                  >
                    {errors.period_to_month}
                  </p>
                )}
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  End Year *
                </label>
                <input
                  type="number"
                  min="1950"
                  max={new Date().getFullYear()}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors.period_to_year ? "border-red-500" : "border-gray-300"
                  }`}
                  value={modalData?.period_to_year || ""}
                  onChange={handleInputChange("period_to_year")}
                  aria-invalid={!!errors.period_to_year}
                  aria-describedby={
                    errors.period_to_year ? "period-to-year-error" : undefined
                  }
                />
                {errors.period_to_year && (
                  <p
                    id="period-to-year-error"
                    className="text-red-600 text-sm mt-1"
                  >
                    {errors.period_to_year}
                  </p>
                )}
              </div>
            </>
          )}
        </div>

        <div>
          <label className="flex items-center space-x-2">
            <input
              type="checkbox"
              checked={modalData?.currently_work_here || false}
              onChange={handleCheckboxChange("currently_work_here")}
              className="text-blue-600 focus:ring-blue-500"
            />
            <span className="text-sm text-gray-700">I currently work here</span>
          </label>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Description
          </label>
          <textarea
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            value={modalData?.description || ""}
            onChange={handleInputChange("description")}
            rows={4}
            placeholder="Describe your responsibilities and achievements..."
          />
        </div>
      </div>
    );
  }

  if (section === "education") {
    return (
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Institution Name *
          </label>
          <input
            type="text"
            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
              errors.institution ? "border-red-500" : "border-gray-300"
            }`}
            value={modalData?.institution || ""}
            onChange={handleInputChange("institution")}
            aria-invalid={!!errors.institution}
            aria-describedby={
              errors.institution ? "institution-error" : undefined
            }
          />
          {errors.institution && (
            <p id="institution-error" className="text-red-600 text-sm mt-1">
              {errors.institution}
            </p>
          )}
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Degree
            </label>
            <input
              type="text"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={modalData?.degree || ""}
              onChange={handleInputChange("degree")}
              placeholder="e.g., Bachelor of Science"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Field of Study
            </label>
            <input
              type="text"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={modalData?.area_of_study || ""}
              onChange={handleInputChange("area_of_study")}
              placeholder="e.g., Mathematics"
            />
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Start Year *
            </label>
            <input
              type="number"
              min="1950"
              max={new Date().getFullYear()}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                errors.from_year ? "border-red-500" : "border-gray-300"
              }`}
              value={modalData?.from_year || ""}
              onChange={handleInputChange("from_year")}
              aria-invalid={!!errors.from_year}
              aria-describedby={
                errors.from_year ? "from-year-error" : undefined
              }
            />
            {errors.from_year && (
              <p id="from-year-error" className="text-red-600 text-sm mt-1">
                {errors.from_year}
              </p>
            )}
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              End Year *
            </label>
            <input
              type="number"
              min="1950"
              max={new Date().getFullYear() + 10}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                errors.to_year ? "border-red-500" : "border-gray-300"
              }`}
              value={modalData?.to_year || ""}
              onChange={handleInputChange("to_year")}
              aria-invalid={!!errors.to_year}
              aria-describedby={errors.to_year ? "to-year-error" : undefined}
            />
            {errors.to_year && (
              <p id="to-year-error" className="text-red-600 text-sm mt-1">
                {errors.to_year}
              </p>
            )}
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Description
          </label>
          <textarea
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            value={modalData?.description || ""}
            onChange={handleInputChange("description")}
            rows={3}
            placeholder="Additional details about your education..."
          />
        </div>
      </div>
    );
  }

  if (section === "awards") {
    return (
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Award Title *
          </label>
          <input
            type="text"
            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
              errors.title ? "border-red-500" : "border-gray-300"
            }`}
            value={modalData?.title || ""}
            onChange={handleInputChange("title")}
            placeholder="e.g., Best Teacher Award 2023"
            aria-invalid={!!errors.title}
            aria-describedby={errors.title ? "award-title-error" : undefined}
          />
          {errors.title && (
            <p id="award-title-error" className="text-red-600 text-sm mt-1">
              {errors.title}
            </p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Description
          </label>
          <textarea
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            value={modalData?.description || ""}
            onChange={handleInputChange("description")}
            rows={4}
            placeholder="Describe the award and why you received it..."
          />
        </div>
      </div>
    );
  }

  if (section === "location") {
    return (
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Street Address *
          </label>
          <input
            type="text"
            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
              errors.street ? "border-red-500" : "border-gray-300"
            }`}
            value={modalData?.street || ""}
            onChange={handleInputChange("street")}
            aria-invalid={!!errors.street}
            aria-describedby={errors.street ? "street-error" : undefined}
          />
          {errors.street && (
            <p id="street-error" className="text-red-600 text-sm mt-1">
              {errors.street}
            </p>
          )}
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              City *
            </label>
            <input
              type="text"
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                errors.city ? "border-red-500" : "border-gray-300"
              }`}
              value={modalData?.city || ""}
              onChange={handleInputChange("city")}
              aria-invalid={!!errors.city}
              aria-describedby={errors.city ? "city-error" : undefined}
            />
            {errors.city && (
              <p id="city-error" className="text-red-600 text-sm mt-1">
                {errors.city}
              </p>
            )}
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Postal Code
            </label>
            <input
              type="text"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={modalData?.postal_code || ""}
              onChange={handleInputChange("postal_code")}
            />
          </div>
        </div>

        <div className="bg-blue-50 p-3 rounded-md">
          <p className="text-sm text-blue-800">
            <strong>Privacy Note:</strong> Your exact address will not be shared
            with students. Only your general area will be visible to help
            students find tutors near them.
          </p>
        </div>
      </div>
    );
  }

  if (section === "charges") {
    return (
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Hourly Rate (₹)
          </label>
          <input
            type="number"
            min="0"
            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
              errors.charges_hourly ? "border-red-500" : "border-gray-300"
            }`}
            value={modalData?.charges_hourly || ""}
            onChange={handleInputChange("charges_hourly")}
            placeholder="e.g., 500"
            aria-invalid={!!errors.charges_hourly}
            aria-describedby={
              errors.charges_hourly ? "charges-hourly-error" : undefined
            }
          />
          {errors.charges_hourly && (
            <p id="charges-hourly-error" className="text-red-600 text-sm mt-1">
              {errors.charges_hourly}
            </p>
          )}
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Monthly Rate (₹)
          </label>
          <input
            type="number"
            min="0"
            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
              errors.charges_monthly ? "border-red-500" : "border-gray-300"
            }`}
            value={modalData?.charges_monthly || ""}
            onChange={handleInputChange("charges_monthly")}
            placeholder="e.g., 8000"
            aria-invalid={!!errors.charges_monthly}
            aria-describedby={
              errors.charges_monthly ? "charges-monthly-error" : undefined
            }
          />
          {errors.charges_monthly && (
            <p id="charges-monthly-error" className="text-red-600 text-sm mt-1">
              {errors.charges_monthly}
            </p>
          )}
        </div>
      </div>
    );
  }

  if (section === "mode") {
    return (
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Teaching Mode *
          </label>
          <div className="space-y-2">
            {[
              { value: "online", label: "Online Only" },
              { value: "offline", label: "In-Person Only" },
              { value: "both", label: "Both Online & In-Person" },
            ].map((option) => (
              <label key={option.value} className="flex items-center space-x-2">
                <input
                  type="radio"
                  name="teaching_mode"
                  value={option.value}
                  checked={modalData === option.value}
                  onChange={handleInputChange("mode")}
                  className="text-blue-600 focus:ring-blue-500"
                />
                <span className="text-gray-700">{option.label}</span>
              </label>
            ))}
          </div>
          {errors.mode && (
            <p className="text-red-600 text-sm mt-1">{errors.mode}</p>
          )}
        </div>
      </div>
    );
  }

  if (section === "preferred_classes") {
    return (
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Select Preferred Classes
          </label>
          <div className="grid grid-cols-2 gap-3 max-h-80 overflow-y-auto p-3 border border-gray-300 rounded-md">
            {[
              "Nursery",
              "LKG",
              "UKG",
              "Class 1",
              "Class 2",
              "Class 3",
              "Class 4",
              "Class 5",
            ].map((cls) => (
              <label
                key={cls}
                className="flex items-center space-x-2 cursor-pointer"
              >
                <input
                  type="checkbox"
                  checked={modalData?.includes(cls) || false}
                  onChange={(e) => {
                    const currentClasses = modalData || [];
                    if (e.target.checked) {
                      onChange("preferred_classes", [...currentClasses, cls]);
                    } else {
                      onChange(
                        "preferred_classes",
                        currentClasses.filter((c) => c !== cls)
                      );
                    }
                  }}
                  className="text-blue-600 focus:ring-blue-500"
                />
                <span className="text-sm text-gray-700">{cls}</span>
              </label>
            ))}
          </div>
          {errors.preferred_classes && (
            <p className="text-red-600 text-sm mt-1">
              {errors.preferred_classes}
            </p>
          )}
        </div>
      </div>
    );
  }

  if (section === "categories") {
    return (
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Select Categories
          </label>
          {Array.isArray(subjects) && subjects.length > 0 ? (
            <div className="grid grid-cols-2 gap-3 max-h-80 overflow-y-auto p-3 border border-gray-300 rounded-md">
              {subjects.map((subject) => (
                <label
                  key={subject.id}
                  className="flex items-center space-x-2 cursor-pointer"
                >
                  <input
                    type="checkbox"
                    checked={modalData?.includes(subject.name) || false}
                    onChange={(e) => {
                      const currentCategories = modalData || [];
                      if (e.target.checked) {
                        onChange("categories", [
                          ...currentCategories,
                          subject.name,
                        ]);
                      } else {
                        onChange(
                          "categories",
                          currentCategories.filter(
                            (name) => name !== subject.name
                          )
                        );
                      }
                    }}
                    className="text-blue-600 focus:ring-blue-500"
                  />
                  <span className="text-sm text-gray-700">{subject.name}</span>
                </label>
              ))}
            </div>
          ) : (
            <p className="text-gray-500 italic">
              No categories available. Please try again later.
            </p>
          )}
          {errors.categories && (
            <p className="text-red-600 text-sm mt-1">{errors.categories}</p>
          )}
        </div>
      </div>
    );
  }

  return <div>Edit form for {section} not implemented</div>;
}

// --- MAIN COMPONENT ---

export default function ProfilePage() {
  const router = useRouter();
  const [userId, setUserId] = useState(null);
  const [teacherId, setTeacherId] = useState(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [toast, setToast] = useState(null);
  const [profile, setProfile] = useState({
    name: "",
    title: "",
    about: "",
    id: "",
  });
  const [location, setLocation] = useState({
    street: "",
    city: "",
    postal_code: "",
    latitude: null,
    longitude: null,
  });
  const [charges, setCharges] = useState({
    charges_hourly: null,
    charges_monthly: null,
  });
  const [subjects, setSubjects] = useState([]);
  const [teaching, setTeaching] = useState([]);
  const [education, setEducation] = useState([]);
  const [awards, setAwards] = useState([]);
  const [preferredClasses, setPreferredClasses] = useState([]);
  const [categories, setCategories] = useState([]);
  const [mode, setMode] = useState("online");
  const [allSubjects, setAllSubjects] = useState([]);
  const [modalState, setModalState] = useState({
    isOpen: false,
    section: null,
  });
  const [modalData, setModalData] = useState(null);
  const [editItemId, setEditItemId] = useState(null);
  const [errors, setErrors] = useState({});

  // Get user ID from localStorage on mount
  useEffect(() => {
    const storedUserId = localStorage.getItem("user_id");
    if (!storedUserId) {
      setToast({
        type: "error",
        message: "User not authenticated. Please login.",
      });
      router.push("/login");
      return;
    }
    setUserId(storedUserId);
  }, [router]);

  // Fetch teacher ID when user ID is available
  useEffect(() => {
    if (!userId) return;

    fetchTeacherIdByUserId(userId, setToast)
      .then(setTeacherId)
      .catch((err) => {
        setToast({
          type: "error",
          message: err.message || "Failed to fetch teacher ID",
        });
        setLoading(false);
      });
  }, [userId]);

  // Fetch all profile data when teacher ID is available
  const fetchAllData = useCallback(async () => {
    if (!teacherId) return;

    setLoading(true);
    try {
      const [profileData, availableSubjects] = await Promise.all([
        fetchTeacherProfile(teacherId, setToast).catch((err) => {
          throw new Error(`Profile fetch failed: ${err.message}`);
        }),
        fetchAvailableSubjects(setToast).catch((err) => {
          throw new Error(`Available subjects fetch failed: ${err.message}`);
        }),
      ]);

      setProfile({
        id: profileData.id,
        name: profileData.user_id
          ? `User ${profileData.user_id.slice(0, 8)}`
          : "Teacher",
        title: profileData.qualification || "",
        about: profileData.about || "",
      });
      setLocation({
        street: profileData.street || "",
        city: profileData.city || "",
        postal_code: profileData.postal_code || "",
        latitude: profileData.latitude || null,
        longitude: profileData.longitude || null,
      });
      setCharges({
        charges_hourly: profileData.charges_hourly || null,
        charges_monthly: profileData.charges_monthly || null,
      });
      setSubjects(
        profileData.subjects.map((name, index) => ({
          id: `subject-${index}`,
          name,
          assignment_id: `assignment-${index}`,
        }))
      );
      setTeaching(
        profileData.experience.map((exp) => ({
          ...exp,
          currently_work_here: !!exp.currently_work_here,
        }))
      );
      setEducation(profileData.education || []);
      setAwards(profileData.awards || []);
      setPreferredClasses(profileData.preferred_classes || []);
      setCategories(profileData.categories || []);
      setMode(profileData.mode || "online");
      setAllSubjects(availableSubjects || []);
    } catch (error) {
      setToast({
        type: "error",
        message: error.message || "Failed to load profile data",
      });
    } finally {
      setLoading(false);
    }
  }, [teacherId]);

  useEffect(() => {
    fetchAllData();
  }, [fetchAllData]);

  // Modal handlers
  const openModal = (section, itemId = null) => {
    setErrors({});
    setEditItemId(itemId);
    setModalState({ isOpen: true, section });

    if (!itemId) {
      let defaultData;
      switch (section) {
        case "title":
          defaultData = profile.title;
          break;
        case "about":
          defaultData = profile.about;
          break;
        case "subjects":
          defaultData = subjects.map((s) => s.id);
          break;
        case "teaching":
          defaultData = {
            institute_name: "",
            job_title: "",
            city: "",
            state: "",
            teaching_role: "",
            period_from_month: "",
            period_from_year: "",
            period_to_month: "",
            period_to_year: "",
            currently_work_here: false,
            description: "",
          };
          break;
        case "education":
          defaultData = {
            institution: "",
            from_year: "",
            to_year: "",
            degree: "",
            area_of_study: "",
            description: "",
          };
          break;
        case "awards":
          defaultData = {
            title: "",
            description: "",
          };
          break;
        case "location":
          defaultData = { ...location };
          break;
        case "charges":
          defaultData = { ...charges };
          break;
        case "mode":
          defaultData = mode;
          break;
        case "preferred_classes":
          defaultData = preferredClasses;
          break;
        case "categories":
          defaultData = categories;
          break;
        default:
          defaultData = "";
      }
      setModalData(defaultData);
    } else {
      let item = null;
      if (section === "teaching") {
        item = teaching.find((exp) => exp.id === itemId);
      } else if (section === "education") {
        item = education.find((edu) => edu.id === itemId);
      } else if (section === "awards") {
        item = awards.find((award) => award.id === itemId);
      }
      setModalData(item ? { ...item } : null);
    }
  };

  const closeModal = () => {
    setModalState({ isOpen: false, section: null });
    setModalData(null);
    setEditItemId(null);
    setErrors({});
  };

  const handleModalChange = (field, value) => {
    if (
      modalData &&
      typeof modalData === "object" &&
      !Array.isArray(modalData)
    ) {
      setModalData((prev) => ({ ...prev, [field]: value }));
    } else {
      setModalData(value);
    }

    if (errors[field]) {
      setErrors((prev) => ({ ...prev, [field]: "" }));
    }
  };

  // Validate modal data
  const validateModalData = (section) => {
    const newErrors = {};

    if (
      ["teaching", "education", "awards", "location", "charges"].includes(
        section
      )
    ) {
      if (modalData && typeof modalData === "object") {
        Object.keys(modalData).forEach((field) => {
          const error = validateField(
            section,
            field,
            modalData[field],
            modalData
          );
          if (error) newErrors[field] = error;
        });
      }
    } else {
      const error = validateField(section, section, modalData, modalData);
      if (error) newErrors[section] = error;
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Save modal data
  const handleSave = async (section) => {
    if (!validateModalData(section)) {
      setToast({
        type: "error",
        message: "Please fix validation errors before saving.",
      });
      return;
    }

    setSaving(true);
    try {
      if (["teaching", "education", "awards"].includes(section)) {
        if (editItemId) {
          if (section === "teaching") {
            await updateTeachingExperience(editItemId, modalData, setToast);
          } else if (section === "education") {
            await updateEducation(editItemId, modalData, setToast);
          } else if (section === "awards") {
            await updateAward(editItemId, modalData, setToast);
          }
          setToast({
            type: "success",
            message: `${
              section.charAt(0).toUpperCase() + section.slice(1)
            } updated successfully`,
          });
        } else {
          if (section === "teaching") {
            await addTeachingExperience(teacherId, modalData, setToast);
          } else if (section === "education") {
            await addEducation(teacherId, modalData, setToast);
          } else if (section === "awards") {
            await addAward(teacherId, modalData, setToast);
          }
          setToast({
            type: "success",
            message: `${
              section.charAt(0).toUpperCase() + section.slice(1)
            } added successfully`,
          });
        }
      } else if (section === "subjects") {
        const oldIds = subjects.map((s) => s.id);
        const newIds = modalData || [];

        const toAdd = newIds.filter((id) => !oldIds.includes(id));
        const toRemove = subjects.filter((s) => !newIds.includes(s.id));

        for (const subject of toRemove) {
          await deleteTeacherSubject(
            subject.assignment_id || subject.id,
            setToast
          );
        }

        for (const subjectId of toAdd) {
          await addTeacherSubject(teacherId, subjectId, setToast);
        }

        setToast({
          type: "success",
          message: "Subjects updated successfully",
        });
      } else {
        let payload = {};
        switch (section) {
          case "title":
            payload = { qualification: modalData };
            break;
          case "about":
            payload = { about: modalData };
            break;
          case "location":
            payload = {
              street: modalData.street,
              city: modalData.city,
              postal_code: modalData.postal_code,
              latitude: modalData.latitude,
              longitude: modalData.longitude,
            };
            break;
          case "charges":
            payload = {
              charges_hourly: modalData.charges_hourly || null,
              charges_monthly: modalData.charges_monthly || null,
            };
            break;
          case "mode":
            payload = { mode: modalData };
            break;
          case "preferred_classes":
            payload = { preferred_classes: modalData };
            break;
          case "categories":
            payload = { categories: modalData };
            break;
        }

        await updateTeacherProfile(teacherId, payload, setToast);
        setToast({
          type: "success",
          message: `${
            section.charAt(0).toUpperCase() + section.slice(1)
          } updated successfully`,
        });
      }

      closeModal();
      await fetchAllData();
    } catch (error) {
      setToast({
        type: "error",
        message: error.message || "Failed to save changes",
      });
    } finally {
      setSaving(false);
    }
  };

  // Delete handler
  const handleDelete = async (section, id) => {
    if (!window.confirm("Are you sure you want to delete this item?")) {
      return;
    }

    try {
      if (section === "teaching") {
        await deleteTeachingExperience(id, setToast);
      } else if (section === "education") {
        await deleteEducation(id, setToast);
      } else if (section === "awards") {
        await deleteAward(id, setToast);
      }

      setToast({
        type: "success",
        message: "Item deleted successfully",
      });
      await fetchAllData();
    } catch (error) {
      setToast({
        type: "error",
        message: error.message || "Failed to delete item",
      });
    }
  };

  // Copy profile link handler
  const copyProfileLink = useCallback(() => {
    const url = `https://addisedu.com/tutor/${teacherId}`;
    navigator.clipboard.writeText(url).then(() => {
      setToast({
        type: "success",
        message: "Profile link copied to clipboard!",
      });
    });
  }, [teacherId]);

  if (!userId) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <p className="text-gray-600">Redirecting to login...</p>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <FaSpinner className="animate-spin text-blue-600 text-4xl mx-auto mb-4" />
          <p className="text-gray-600">Loading your profile...</p>
        </div>
      </div>
    );
  }

  if (toast?.type === "error" && !teacherId) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <p className="text-red-600 mb-4">{toast.message}</p>
          <button
            onClick={fetchAllData}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
            aria-label="Retry loading profile"
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 font-sans antialiased mt-10">
      {toast && (
        <Toast
          message={toast.message}
          type={toast.type}
          onClose={() => setToast(null)}
        />
      )}
      {modalState.isOpen && (
        <Modal
          isOpen={modalState.isOpen}
          title={`Edit ${
            modalState.section.charAt(0).toUpperCase() +
            modalState.section.slice(1)
          }`}
          onClose={closeModal}
          onSave={() => handleSave(modalState.section)}
          loading={saving}
        >
          <EditModalContent
            section={modalState.section}
            modalData={modalData}
            errors={errors}
            onChange={handleModalChange}
            subjects={allSubjects}
          />
        </Modal>
      )}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="flex flex-col lg:flex-row gap-8">
          <main className="flex-1 space-y-6">
            {/* Profile Header */}
            <ProfileHeader
              name={profile.name}
              title={profile.title}
              onEdit={openModal}
            />

            {/* About Section */}
            <SectionCard title="About" sectionKey="about" onEdit={openModal}>
              {profile.about ? (
                <p className="text-gray-700 whitespace-pre-line leading-relaxed">
                  {profile.about}
                </p>
              ) : (
                <p className="text-gray-500 italic">
                  Tell students about yourself, your teaching philosophy, and
                  experience.
                </p>
              )}
            </SectionCard>

            {/* Subjects Section */}
            <SectionCard
              title="Subjects"
              sectionKey="subjects"
              onEdit={openModal}
            >
              {subjects.length > 0 ? (
                <div className="flex flex-wrap gap-2">
                  {subjects.map((subject) => (
                    <span
                      key={subject.id}
                      className="inline-flex items-center px-3 py-1.5 rounded-full text-sm font-medium bg-blue-100 text-blue-800"
                    >
                      {subject.name}
                    </span>
                  ))}
                </div>
              ) : (
                <p className="text-gray-500 italic">
                  Add subjects you can teach to help students find you.
                </p>
              )}
            </SectionCard>

            {/* Preferred Classes Section */}
            <SectionCard
              title="Preferred Classes"
              sectionKey="preferred_classes"
              onEdit={openModal}
            >
              {preferredClasses.length > 0 ? (
                <div className="flex flex-wrap gap-2">
                  {preferredClasses.map((cls) => (
                    <span
                      key={cls}
                      className="inline-flex items-center px-3 py-1.5 rounded-full text-sm font-medium bg-blue-100 text-blue-800"
                    >
                      {cls}
                    </span>
                  ))}
                </div>
              ) : (
                <p className="text-gray-500 italic">
                  Add preferred classes to help students find you.
                </p>
              )}
            </SectionCard>

            {/* Categories Section */}
            <SectionCard
              title="Categories"
              sectionKey="categories"
              onEdit={openModal}
            >
              {categories.length > 0 ? (
                <div className="flex flex-wrap gap-2">
                  {categories.map((category) => (
                    <span
                      key={category}
                      className="inline-flex items-center px-3 py-1.5 rounded-full text-sm font-medium bg-blue-100 text-blue-800"
                    >
                      {category}
                    </span>
                  ))}
                </div>
              ) : (
                <p className="text-gray-500 italic">
                  Add categories to better describe your teaching expertise.
                </p>
              )}
            </SectionCard>

            {/* Teaching Experience Section */}
            <SectionCard
              title="Teaching Experience"
              sectionKey="teaching"
              onEdit={openModal}
            >
              {teaching.length > 0 ? (
                <div className="space-y-6">
                  {teaching.map((exp, index) => (
                    <ExperienceItem
                      key={exp.id}
                      id={exp.id}
                      title={`${exp.job_title} at ${exp.institute_name}`}
                      subtitle={`${exp.city}, ${exp.state}`}
                      period={
                        exp.currently_work_here
                          ? `${exp.period_from_month} ${exp.period_from_year} - Present`
                          : `${exp.period_from_month} ${exp.period_from_year} - ${exp.period_to_month} ${exp.period_to_year}`
                      }
                      description={exp.description}
                      isLast={index === teaching.length - 1}
                      onEdit={openModal.bind(null, "teaching")}
                      onDelete={handleDelete.bind(null, "teaching")}
                    />
                  ))}
                  <button
                    onClick={() => openModal("teaching")}
                    className="flex items-center gap-2 text-blue-600 hover:text-blue-800 font-medium"
                  >
                    <FaPlus size={14} />
                    Add Experience
                  </button>
                </div>
              ) : (
                <div>
                  <p className="text-gray-500 italic mb-4">
                    Add your teaching experience to build credibility.
                  </p>
                  <button
                    onClick={() => openModal("teaching")}
                    className="flex items-center gap-2 text-blue-600 hover:text-blue-800 font-medium"
                  >
                    <FaPlus size={14} />
                    Add Experience
                  </button>
                </div>
              )}
            </SectionCard>

            {/* Education Section */}
            <SectionCard
              title="Education"
              sectionKey="education"
              onEdit={openModal}
            >
              {education.length > 0 ? (
                <div className="space-y-6">
                  {education.map((edu, index) => (
                    <ExperienceItem
                      key={edu.id}
                      id={edu.id}
                      title={`${edu.degree}${
                        edu.area_of_study ? ` in ${edu.area_of_study}` : ""
                      }`}
                      subtitle={edu.institution}
                      period={`${edu.from_year} - ${edu.to_year}`}
                      description={edu.description}
                      isLast={index === education.length - 1}
                      onEdit={openModal.bind(null, "education")}
                      onDelete={handleDelete.bind(null, "education")}
                    />
                  ))}
                  <button
                    onClick={() => openModal("education")}
                    className="flex items-center gap-2 text-blue-600 hover:text-blue-800 font-medium"
                  >
                    <FaPlus size={14} />
                    Add Education
                  </button>
                </div>
              ) : (
                <div>
                  <p className="text-gray-500 italic mb-4">
                    Add your educational background to showcase your
                    qualifications.
                  </p>
                  <button
                    onClick={() => openModal("education")}
                    className="flex items-center gap-2 text-blue-600 hover:text-blue-800 font-medium"
                  >
                    <FaPlus size={14} />
                    Add Education
                  </button>
                </div>
              )}
            </SectionCard>

            {/* Awards Section */}
            {/* <SectionCard
              title="Awards & Achievements"
              sectionKey="awards"
              onEdit={openModal}
            >
              {awards.length > 0 ? (
                <div className="space-y-6">
                  {awards.map((award, index) => (
                    <ExperienceItem
                      key={award.id}
                      id={award.id}
                      title={award.title}
                      subtitle={award.subtitle}
                      period={award.year ? `Received in ${award.year}` : ""}
                      description={award.description}
                      isLast={index === awards.length - 1}
                      onEdit={openModal.bind(null, "awards")}
                      onDelete={handleDelete.bind(null, "awards")}
                    />
                  ))}
                  <button
                    onClick={() => openModal("awards")}
                    className="flex items-center gap-2 text-blue-600 hover:text-blue-800 font-medium"
                  >
                    <FaPlus size={14} />
                    Add Award
                  </button>
                </div>
              ) : (
                <div>
                  <p className="text-gray-500 italic mb-4">
                    Add awards to highlight your achievements.
                  </p>
                  <button
                    onClick={() => openModal("awards")}
                    className="flex items-center gap-2 text-blue-600 hover:text-blue-800 font-medium"
                  >
                    <FaPlus size={14} />
                    Add Award
                  </button>
                </div>
              )}
            </SectionCard> */}

            {/* Location Section */}
            <SectionCard
              title="Location"
              sectionKey="location"
              onEdit={openModal}
            >
              {location.street || location.city ? (
                <div className="flex items-center gap-2">
                  <FaMapMarkerAlt className="text-blue-600" />
                  <p className="text-gray-700">
                    {location.street}, {location.city}
                    {location.postal_code ? `, ${location.postal_code}` : ""}
                  </p>
                </div>
              ) : (
                <p className="text-gray-500 italic">
                  Add your location to help students find you.
                </p>
              )}
            </SectionCard>
          </main>

          {/* Sidebar */}
          <Sidebar
            profile={profile}
            location={location}
            charges={charges}
            subjects={subjects}
            mode={mode}
            onEdit={openModal}
            onCopy={copyProfileLink}
          />
        </div>
      </div>
    </div>
  );
}
