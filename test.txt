"use client";
import { useState, useCallback, useEffect } from "react";
import {
  FaFacebook,
  FaTwitter,
  FaLinkedin,
  FaShareAlt,
  FaEdit,
  FaCopy,
  FaTimes,
  FaCheck,
  FaMapMarkerAlt,
  FaClock,
  FaMoneyBillWave,
  FaGraduationCap,
  FaChalkboardTeacher,
  FaTrophy,
  FaGlobe,
  FaUser,
  FaBriefcase,
  FaStar,
  FaCalendarAlt,
} from "react-icons/fa";
import {
  fetchTeacherProfile,
  updateTeacherProfile,
  addTeachingExperience,
  addEducation,
  addAward,
  updateSubjects,
} from "../../services/profileservice";

// Validation Utility
const validateField = (section, field, value, modalData) => {
  let error = "";
  if (section === "title" && !value.trim()) error = "Title is required";
  if (section === "about" && value.length > 500)
    error = "About section cannot exceed 500 characters";
  if (section === "subjects" && !value.length)
    error = "At least one subject is required";
  if (section === "teaching") {
    if (field === "institute_name" && !value.trim())
      error = "Institute name is required";
    if (field === "job_title" && !value.trim()) error = "Job title is required";
    if (field === "city" && !value) error = "City is required";
    if (field === "state" && !value) error = "State is required";
    if (field === "teaching_role" && !value) error = "Role is required";
    if (field === "period_from_month" && !value)
      error = "Start month is required";
    if (field === "period_from_year" && !value)
      error = "Start year is required";
    if (
      !modalData.teaching.currently_work_here &&
      field === "period_to_month" &&
      !value
    )
      error = "End month is required";
    if (
      !modalData.teaching.currently_work_here &&
      field === "period_to_year" &&
      !value
    )
      error = "End year is required";
  }
  if (section === "education") {
    if (field === "institution" && !value.trim())
      error = "Institution name is required";
    if (field === "from_year" && !value) error = "Start year is required";
    if (field === "to_year" && !value) error = "End year is required";
  }
  if (section === "awards") {
    if (field === "title" && !value.trim()) error = "Title is required";
  }
  if (section === "location" && field === "street" && !value.trim())
    error = "Street is required";
  if (
    section === "charges" &&
    field === "charges_hourly" &&
    (!value || isNaN(value) || value <= 0)
  )
    error = "Valid hourly rate is required";
  if (section === "availability" && field === "status" && !value)
    error = "Availability status is required";
  if (section === "mode" && !value) error = "Teaching mode is required";
  return error;
};

// Profile Header Component
const ProfileHeader = ({ name, title, onEdit }) => (
  <div className="flex flex-col md:flex-row items-start md:items-center gap-6 mb-8 bg-white p-6 rounded-2xl shadow-sm border border-gray-100">
    <div className="relative group">
      <div className="w-24 h-24 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center text-white text-4xl">
        <FaUser />
      </div>
    </div>
    <div className="flex-1 w-full">
      <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-3">
        <div>
          <h1 className="text-2xl md:text-3xl font-bold text-gray-800">
            {name || "Teacher"}
          </h1>
          <p className="text-gray-600 mt-1">
            {title || "No professional title added"}
          </p>
        </div>
        <button
          onClick={() => onEdit("title")}
          className="flex items-center gap-2 text-blue-500 cursor-pointer hover:text-blue-700 transition px-4 py-2 bg-blue-50 rounded-lg text-sm font-medium"
        >
          <FaEdit className="w-4 h-4" />
          Edit Title
        </button>
      </div>
      <div className="flex items-center mt-4">
        <div className="flex">
          {[...Array(5)].map((_, i) => (
            <FaStar key={i} className="w-5 h-5 text-yellow-400" />
          ))}
        </div>
        <span className="ml-2 text-gray-600 text-sm">5.0 (12 reviews)</span>
      </div>
    </div>
  </div>
);

// Section Card Component
const SectionCard = ({
  title,
  onEdit,
  children,
  sectionKey,
  className = "",
}) => {
  const icons = {
    about: <FaUser className="text-blue-500" />,
    subjects: <FaChalkboardTeacher className="text-blue-500" />,
    teaching: <FaBriefcase className="text-blue-500" />,
    education: <FaGraduationCap className="text-blue-500" />,
    awards: <FaTrophy className="text-blue-500" />,
    location: <FaMapMarkerAlt className="text-blue-500" />,
    workHistory: <FaCalendarAlt className="text-blue-500" />,
    default: <FaGlobe className="text-blue-500" />,
  };

  return (
    <div
      className={`mb-6 bg-white p-6 rounded-2xl shadow-sm border border-gray-100 ${className}`}
    >
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center gap-3">
          {icons[sectionKey] || icons.default}
          <h2 className="text-xl font-semibold text-gray-800">{title}</h2>
        </div>
        {onEdit && (
          <button
            onClick={() => onEdit(sectionKey)}
            className="flex items-center gap-2 text-blue-500 cursor-pointer hover:text-blue-700 transition px-3 py-1.5 bg-blue-50 rounded-lg text-sm font-medium"
          >
            <FaEdit className="w-3.5 h-3.5" />
            Edit
          </button>
        )}
      </div>
      {children || (
        <p className="text-gray-500 italic">No information added yet</p>
      )}
    </div>
  );
};

// Experience Item Component
const ExperienceItem = ({ title, subtitle, period, description, isLast }) => (
  <div
    className={`flex gap-4 ${
      !isLast ? "pb-6 mb-6 border-b border-gray-100" : ""
    }`}
  >
    <div className="flex flex-col items-center">
      <div className="w-3 h-3 rounded-full bg-blue-500 mt-1.5"></div>
      {!isLast && <div className="w-0.5 h-full bg-gray-200 mt-1.5"></div>}
    </div>
    <div className="flex-1">
      <h3 className="font-medium text-gray-800">{title}</h3>
      {subtitle && <p className="text-gray-600 text-sm mt-1">{subtitle}</p>}
      {period && <p className="text-gray-500 text-sm mt-1">{period}</p>}
      {description && (
        <p className="text-gray-600 mt-3 text-sm leading-relaxed">
          {description}
        </p>
      )}
    </div>
  </div>
);

// Sidebar Component
const Sidebar = ({ profileData, onEdit, onCopy }) => {
  const stats = [
    {
      title: "Hourly Rate",
      key: "charges",
      value: profileData.charges_hourly
        ? `₹${profileData.charges_hourly}/hr`
        : "Not set",
      icon: <FaMoneyBillWave className="text-blue-500" />,
    },
    {
      title: "Monthly Rate",
      key: "charges",
      value: profileData.charges_monthly
        ? `₹${profileData.charges_monthly}/month`
        : "Not set",
      icon: <FaMoneyBillWave className="text-blue-500" />,
    },
    {
      title: "Total Hours",
      value: "0", // Placeholder, requires additional data
      icon: <FaClock className="text-blue-500" />,
    },
    {
      title: "Total Earnings",
      value: "₹0", // Placeholder, requires additional data
      icon: <FaMoneyBillWave className="text-blue-500" />,
    },
    {
      title: "Classes Taught",
      value: "0", // Placeholder, requires additional data
      icon: <FaChalkboardTeacher className="text-blue-500" />,
    },
    {
      title: "Teaching Mode",
      key: "mode",
      value: profileData.mode
        ? profileData.mode.charAt(0).toUpperCase() + profileData.mode.slice(1)
        : "Not set",
      icon: <FaGlobe className="text-blue-500" />,
    },
  ];

  return (
    <div className="w-full md:w-80 lg:w-96 bg-white p-6 border-l border-gray-200 md:sticky md:top-0 md:h-screen md:overflow-y-auto">
      <div className="space-y-6">
        {stats.map(({ title, key, value, icon }) => (
          <div
            key={title}
            className="pb-4 border-b border-gray-100 last:border-0"
          >
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center gap-3 text-gray-700">
                <span className="text-blue-500">{icon}</span>
                <h3 className="font-medium">{title}</h3>
              </div>
              {key && (
                <button
                  onClick={() => onEdit(key)}
                  className="text-blue-500 hover:text-blue-700 cursor-pointer transition text-sm flex items-center gap-1"
                  aria-label={`Edit ${title}`}
                >
                  <FaEdit className="w-3 h-3" />
                </button>
              )}
            </div>
            <p className="text-gray-600 pl-9">{value}</p>
          </div>
        ))}

        <div className="pt-4">
          <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-3">
            <FaShareAlt className="text-blue-500" />
            Share Profile
          </h3>
          <div className="flex items-center mb-4">
            <input
              type="text"
              readOnly
              value="https://www.addisedu.com/tutor/arpit-sharma"
              className="flex-1 p-2.5 text-sm border border-gray-300 rounded-l-lg focus:outline-none focus:ring-1 focus:ring-blue-500"
              aria-label="Profile URL"
            />
            <button
              onClick={onCopy}
              className="p-2.5 bg-blue-500 cursor-pointer hover:bg-blue-600 text-white rounded-r-lg transition"
              aria-label="Copy profile link"
            >
              <FaCopy />
            </button>
          </div>
          <div className="flex justify-start gap-4">
            <button
              className="text-blue-600 hover:text-blue-800 cursor-pointer transition p-2 rounded-full bg-blue-50"
              aria-label="Share on Facebook"
            >
              <FaFacebook size={18} />
            </button>
            <button
              className="text-blue-400 hover:text-blue-600 cursor-pointer transition p-2 rounded-full bg-blue-50"
              aria-label="Share on Twitter"
            >
              <FaTwitter size={18} />
            </button>
            <button
              className="text-blue-700 hover:text-blue-900 cursor-pointer transition p-2 rounded-full bg-blue-50"
              aria-label="Share on LinkedIn"
            >
              <FaLinkedin size={18} />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// Modal Component
const Modal = ({ isOpen, onClose, onSave, title, children }) => {
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = "hidden";
    } else {
      document.body.style.overflow = "";
    }
    return () => {
      document.body.style.overflow = "";
    };
  }, [isOpen]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-opacity-100 flex items-center justify-center z-50 p-4 backdrop-blur-sm">
      <div
        className="bg-white rounded-xl w-full max-w-md shadow-xl transform transition-all max-h-[90vh] flex flex-col"
        onClick={(e) => e.stopPropagation()}
      >
        <div className="flex justify-between items-center p-5 border-b border-gray-200 sticky top-0 bg-white z-10">
          <h2 className="text-xl font-semibold text-gray-800">{title}</h2>
          <button
            onClick={onClose}
            className="text-gray-500 hover:text-gray-700 transition p-1 rounded-full hover:bg-gray-100"
            aria-label="Close modal"
          >
            <FaTimes />
          </button>
        </div>
        <div className="p-5 overflow-y-auto flex-1">{children}</div>
        <div className="flex justify-end gap-3 p-5 border-t border-gray-200 sticky bottom-0 bg-white z-10">
          <button
            onClick={onClose}
            className="px-5 py-2.5 text-gray-700 hover:bg-gray-100 cursor-pointer rounded-lg transition font-medium"
          >
            Cancel
          </button>
          <button
            onClick={onSave}
            className="px-5 py-2.5 bg-blue-500 hover:bg-blue-600 cursor-pointer text-white rounded-lg transition font-medium flex items-center gap-2"
          >
            <FaCheck />
            Save Changes
          </button>
        </div>
      </div>
    </div>
  );
};

// Toast Component
const Toast = ({ message, type, onClose }) => {
  useEffect(() => {
    const timer = setTimeout(() => {
      onClose();
    }, 3000);
    return () => clearTimeout(timer);
  }, [onClose]);

  return (
    <div
      className={`fixed top-18 right-6 p-4 rounded-lg shadow-lg text-white flex items-start gap-3 max-w-sm ${
        type === "success" ? "bg-green-500" : "bg-red-500"
      } animate-fade-in-up`}
    >
      <div>
        <p className="font-medium">
          {type === "success" ? "Success" : "Error"}
        </p>
        <p className="text-sm">{message}</p>
      </div>
    </div>
  );
};

// Edit Modal Content Component
const EditModalContent = ({
  section,
  modalData,
  errors,
  onChange,
  subjects,
}) => {
  const months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];
  const years = Array.from(
    { length: 30 },
    (_, i) => new Date().getFullYear() - i
  );

  switch (section) {
    case "title":
      return (
        <div className="space-y-4">
          <div>
            <label className="block text-gray-700 font-medium mb-2">
              Professional Title
            </label>
            <input
              type="text"
              className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 ${
                errors.title
                  ? "border-red-500 focus:ring-red-500"
                  : "border-gray-300 focus:ring-blue-500"
              }`}
              value={modalData.title}
              onChange={(e) => onChange(section, "title", e.target.value)}
              placeholder="Enter your professional title"
            />
            {errors.title && (
              <p className="text-red-500 text-sm mt-1">{errors.title}</p>
            )}
          </div>
        </div>
      );
    case "about":
      return (
        <div className="space-y-4">
          <div>
            <label className="block text-gray-700 font-medium mb-2">
              About You
            </label>
            <textarea
              className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 min-h-[150px] ${
                errors.about
                  ? "border-red-500 focus:ring-red-500"
                  : "border-gray-300 focus:ring-blue-500"
              }`}
              value={modalData.about}
              onChange={(e) => onChange(section, "about", e.target.value)}
              placeholder="Tell students about yourself and your teaching style..."
            />
            <div className="flex justify-between items-center mt-1">
              {errors.about ? (
                <p className="text-red-500 text-sm">{errors.about}</p>
              ) : (
                <span className="text-gray-400 text-sm">
                  {500 - (modalData.about?.length || 0)} characters remaining
                </span>
              )}
            </div>
          </div>
        </div>
      );
    case "subjects":
      return (
        <div className="space-y-4">
          <div>
            <label className="block text-gray-700 font-medium mb-2">
              Subjects You Teach
            </label>
            <select
              multiple
              className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 min-h-[150px] ${
                errors.subjects
                  ? "border-red-500 focus:ring-red-500"
                  : "border-gray-300 focus:ring-blue-500"
              }`}
              value={modalData.subjects || []}
              onChange={(e) => {
                const selected = Array.from(
                  e.target.selectedOptions,
                  (option) => option.value
                );
                onChange(section, "subjects", selected);
              }}
            >
              {subjects.map((subject) => (
                <option key={subject.id} value={subject.id}>
                  {subject.name}
                </option>
              ))}
            </select>
            {errors.subjects && (
              <p className="text-red-500 text-sm mt-1">{errors.subjects}</p>
            )}
          </div>
        </div>
      );
    case "teaching":
      return (
        <div className="space-y-5">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div>
              <label className="block text-gray-700 font-medium mb-1 text-sm">
                Institute Name
              </label>
              <input
                type="text"
                className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 text-sm ${
                  errors.institute_name
                    ? "border-red-500 focus:ring-red-500"
                    : "border-gray-300 focus:ring-blue-500"
                }`}
                value={modalData.teaching.institute_name}
                onChange={(e) =>
                  onChange(section, "institute_name", e.target.value)
                }
                placeholder="School/University name"
              />
              {errors.institute_name && (
                <p className="text-red-500 text-xs mt-1">
                  {errors.institute_name}
                </p>
              )}
            </div>
            <div>
              <label className="block text-gray-700 font-medium mb-1 text-sm">
                Job Title
              </label>
              <input
                type="text"
                className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 text-sm ${
                  errors.job_title
                    ? "border-red-500 focus:ring-red-500"
                    : "border-gray-300 focus:ring-blue-500"
                }`}
                value={modalData.teaching.job_title}
                onChange={(e) => onChange(section, "job_title", e.target.value)}
                placeholder="Your position"
              />
              {errors.job_title && (
                <p className="text-red-500 text-xs mt-1">{errors.job_title}</p>
              )}
            </div>
          </div>

          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div>
              <label className="block text-gray-700 font-medium mb-1 text-sm">
                City
              </label>
              <input
                type="text"
                className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 text-sm ${
                  errors.city
                    ? "border-red-500 focus:ring-red-500"
                    : "border-gray-300 focus:ring-blue-500"
                }`}
                value={modalData.teaching.city}
                onChange={(e) => onChange(section, "city", e.target.value)}
                placeholder="Enter city"
              />
              {errors.city && (
                <p className="text-red-500 text-xs mt-1">{errors.city}</p>
              )}
            </div>
            <div>
              <label className="block text-gray-700 font-medium mb-1 text-sm">
                State
              </label>
              <input
                type="text"
                className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 text-sm ${
                  errors.state
                    ? "border-red-500 focus:ring-red-500"
                    : "border-gray-300 focus:ring-blue-500"
                }`}
                value={modalData.teaching.state}
                onChange={(e) => onChange(section, "state", e.target.value)}
                placeholder="Enter state"
              />
              {errors.state && (
                <p className="text-red-500 text-xs mt-1">{errors.state}</p>
              )}
            </div>
          </div>

          <div>
            <label className="block text-gray-700 font-medium mb-1 text-sm">
              Role
            </label>
            <input
              type="text"
              className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 text-sm ${
                errors.teaching_role
                  ? "border-red-500 focus:ring-red-500"
                  : "border-gray-300 focus:ring-blue-500"
              }`}
              value={modalData.teaching.teaching_role}
              onChange={(e) =>
                onChange(section, "teaching_role", e.target.value)
              }
              placeholder="e.g., Teacher, Tutor"
            />
            {errors.teaching_role && (
              <p className="text-red-500 text-xs mt-1">
                {errors.teaching_role}
              </p>
            )}
          </div>

          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div>
              <label className="block text-gray-700 font-medium mb-1 text-sm">
                Start Date
              </label>
              <div className="grid grid-cols-2 gap-2">
                <select
                  className={`p-3 border rounded-lg focus:outline-none focus:ring-2 text-sm ${
                    errors.period_from_month
                      ? "border-red-500 focus:ring-red-500"
                      : "border-gray-300 focus:ring-blue-500"
                  }`}
                  value={modalData.teaching.period_from_month}
                  onChange={(e) =>
                    onChange(section, "period_from_month", e.target.value)
                  }
                >
                  <option value="">Month</option>
                  {months.map((month) => (
                    <option key={month} value={month}>
                      {month}
                    </option>
                  ))}
                </select>
                <select
                  className={`p-3 border rounded-lg focus:outline-none focus:ring-2 text-sm ${
                    errors.period_from_year
                      ? "border-red-500 focus:ring-red-500"
                      : "border-gray-300 focus:ring-blue-500"
                  }`}
                  value={modalData.teaching.period_from_year}
                  onChange={(e) =>
                    onChange(section, "period_from_year", e.target.value)
                  }
                >
                  <option value="">Year</option>
                  {years.map((year) => (
                    <option key={year} value={year}>
                      {year}
                    </option>
                  ))}
                </select>
              </div>
              {(errors.period_from_month || errors.period_from_year) && (
                <p className="text-red-500 text-xs mt-1">
                  {errors.period_from_month || errors.period_from_year}
                </p>
              )}
            </div>

            <div>
              <label className="block text-gray-700 font-medium mb-1 text-sm">
                End Date
              </label>
              <div className="grid grid-cols-2 gap-2">
                <select
                  className={`p-3 border rounded-lg focus:outline-none focus:ring-2 text-sm ${
                    errors.period_to_month
                      ? "border-red-500 focus:ring-red-500"
                      : "border-gray-300 focus:ring-blue-500"
                  }`}
                  value={modalData.teaching.period_to_month}
                  onChange={(e) =>
                    onChange(section, "period_to_month", e.target.value)
                  }
                  disabled={modalData.teaching.currently_work_here}
                >
                  <option value="">Month</option>
                  {months.map((month) => (
                    <option key={month} value={month}>
                      {month}
                    </option>
                  ))}
                </select>
                <select
                  className={`p-3 border rounded-lg focus:outline-none focus:ring-2 text-sm ${
                    errors.period_to_year
                      ? "border-red-500 focus:ring-red-500"
                      : "border-gray-300 focus:ring-blue-500"
                  }`}
                  value={modalData.teaching.period_to_year}
                  onChange={(e) =>
                    onChange(section, "period_to_year", e.target.value)
                  }
                  disabled={modalData.teaching.currently_work_here}
                >
                  <option value="">Year</option>
                  {years.map((year) => (
                    <option key={year} value={year}>
                      {year}
                    </option>
                  ))}
                </select>
              </div>
              {(errors.period_to_month || errors.period_to_year) &&
                !modalData.teaching.currently_work_here && (
                  <p className="text-red-500 text-xs mt-1">
                    {errors.period_to_month || errors.period_to_year}
                  </p>
                )}
            </div>
          </div>

          <div className="flex items-center">
            <input
              type="checkbox"
              id="currently_work_here"
              className="mr-2 h-4 w-4 text-blue-500 focus:ring-blue-500 border-gray-300 rounded"
              checked={modalData.teaching.currently_work_here}
              onChange={(e) =>
                onChange(section, "currently_work_here", e.target.checked)
              }
            />
            <label
              htmlFor="currently_work_here"
              className="text-gray-700 text-sm"
            >
              I currently work here
            </label>
          </div>

          <div>
            <label className="block text-gray-700 font-medium mb-1 text-sm">
              Description (Optional)
            </label>
            <textarea
              className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 border-gray-300 focus:ring-blue-500 text-sm min-h-[100px]"
              value={modalData.teaching.description}
              onChange={(e) => onChange(section, "description", e.target.value)}
              placeholder="Describe your responsibilities and achievements..."
            />
          </div>
        </div>
      );
    case "education":
      return (
        <div className="space-y-4">
          <div>
            <label className="block text-gray-700 font-medium mb-1 text-sm">
              Institution Name
            </label>
            <input
              type="text"
              className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 text-sm ${
                errors.institution
                  ? "border-red-500 focus:ring-red-500"
                  : "border-gray-300 focus:ring-blue-500"
              }`}
              value={modalData.education.institution}
              onChange={(e) => onChange(section, "institution", e.target.value)}
              placeholder="School/University name"
            />
            {errors.institution && (
              <p className="text-red-500 text-xs mt-1">{errors.institution}</p>
            )}
          </div>

          <div>
            <label className="block text-gray-700 font-medium mb-1 text-sm">
              Duration
            </label>
            <div className="grid grid-cols-2 gap-3">
              <select
                className={`p-3 border rounded-lg focus:outline-none focus:ring-2 text-sm ${
                  errors.from_year
                    ? "border-red-500 focus:ring-red-500"
                    : "border-gray-300 focus:ring-blue-500"
                }`}
                value={modalData.education.from_year}
                onChange={(e) => onChange(section, "from_year", e.target.value)}
              >
                <option value="">Start Year</option>
                {years.map((year) => (
                  <option key={year} value={year}>
                    {year}
                  </option>
                ))}
              </select>
              <select
                className={`p-3 border rounded-lg focus:outline-none focus:ring-2 text-sm ${
                  errors.to_year
                    ? "border-red-500 focus:ring-red-500"
                    : "border-gray-300 focus:ring-blue-500"
                }`}
                value={modalData.education.to_year}
                onChange={(e) => onChange(section, "to_year", e.target.value)}
              >
                <option value="">End Year</option>
                {years.map((year) => (
                  <option key={year} value={year}>
                    {year}
                  </option>
                ))}
              </select>
            </div>
            {(errors.from_year || errors.to_year) && (
              <p className="text-red-500 text-xs mt-1">
                {errors.from_year || errors.to_year}
              </p>
            )}
          </div>

          <div>
            <label className="block text-gray-700 font-medium mb-1 text-sm">
              Degree (Optional)
            </label>
            <input
              type="text"
              className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 border-gray-300 focus:ring-blue-500 text-sm"
              value={modalData.education.degree}
              onChange={(e) => onChange(section, "degree", e.target.value)}
              placeholder="e.g., B.Sc, M.A, Ph.D"
            />
          </div>

          <div>
            <label className="block text-gray-700 font-medium mb-1 text-sm">
              Field of Study (Optional)
            </label>
            <input
              type="text"
              className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 border-gray-300 focus:ring-blue-500 text-sm"
              value={modalData.education.area_of_study}
              onChange={(e) =>
                onChange(section, "area_of_study", e.target.value)
              }
              placeholder="e.g., Computer Science, Mathematics"
            />
          </div>

          <div>
            <label className="block text-gray-700 font-medium mb-1 text-sm">
              Description (Optional)
            </label>
            <textarea
              className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 border-gray-300 focus:ring-blue-500 text-sm min-h-[80px]"
              value={modalData.education.description}
              onChange={(e) => onChange(section, "description", e.target.value)}
              placeholder="Notable achievements or specializations..."
            />
          </div>
        </div>
      );
    case "awards":
      return (
        <div className="space-y-4">
          <div>
            <label className="block text-gray-700 font-medium mb-1 text-sm">
              Title
            </label>
            <input
              type="text"
              className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 text-sm ${
                errors.title
                  ? "border-red-500 focus:ring-red-500"
                  : "border-gray-300 focus:ring-blue-500"
              }`}
              value={modalData.awards.title}
              onChange={(e) => onChange(section, "title", e.target.value)}
              placeholder="Award or certification name"
            />
            {errors.title && (
              <p className="text-red-500 text-xs mt-1">{errors.title}</p>
            )}
          </div>
          <div>
            <label className="block text-gray-700 font-medium mb-1 text-sm">
              Description
            </label>
            <textarea
              className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 border-gray-300 focus:ring-blue-500 text-sm min-h-[100px]"
              value={modalData.awards.description}
              onChange={(e) => onChange(section, "description", e.target.value)}
              placeholder="Describe the award or certification..."
            />
          </div>
        </div>
      );
    case "location":
      return (
        <div className="space-y-4">
          <div>
            <label className="block text-gray-700 font-medium mb-1 text-sm">
              Street
            </label>
            <input
              type="text"
              className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 text-sm ${
                errors.street
                  ? "border-red-500 focus:ring-red-500"
                  : "border-gray-300 focus:ring-blue-500"
              }`}
              value={modalData.location.street}
              onChange={(e) => onChange(section, "street", e.target.value)}
              placeholder="Enter street address"
            />
            {errors.street && (
              <p className="text-red-500 text-xs mt-1">{errors.street}</p>
            )}
          </div>
          <div>
            <label className="block text-gray-700 font-medium mb-1 text-sm">
              City
            </label>
            <input
              type="text"
              className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 border-gray-300 focus:ring-blue-500 text-sm"
              value={modalData.location.city}
              onChange={(e) => onChange(section, "city", e.target.value)}
              placeholder="Enter city"
            />
          </div>
          <div>
            <label className="block text-gray-700 font-medium mb-1 text-sm">
              Postal Code
            </label>
            <input
              type="text"
              className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 border-gray-300 focus:ring-blue-500 text-sm"
              value={modalData.location.postal_code}
              onChange={(e) => onChange(section, "postal_code", e.target.value)}
              placeholder="Enter postal code"
            />
          </div>
          <div className="h-48 bg-gray-100 rounded-lg flex items-center justify-center text-gray-400">
            Map Preview (Interactive map would go here)
          </div>
        </div>
      );
    case "charges":
      return (
        <div className="space-y-4">
          <div>
            <label className="block text-gray-700 font-medium mb-1 text-sm">
              Hourly Rate (₹)
            </label>
            <input
              type="number"
              className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 text-sm ${
                errors.charges_hourly
                  ? "border-red-500 focus:ring-red-500"
                  : "border-gray-300 focus:ring-blue-500"
              }`}
              value={modalData.charges.charges_hourly}
              onChange={(e) =>
                onChange(section, "charges_hourly", e.target.value)
              }
              placeholder="Enter hourly rate"
            />
            {errors.charges_hourly && (
              <p className="text-red-500 text-xs mt-1">
                {errors.charges_hourly}
              </p>
            )}
          </div>
          <div>
            <label className="block text-gray-700 font-medium mb-1 text-sm">
              Monthly Rate (₹)
            </label>
            <input
              type="number"
              className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 border-gray-300 focus:ring-blue-500 text-sm"
              value={modalData.charges.charges_monthly}
              onChange={(e) =>
                onChange(section, "charges_monthly", e.target.value)
              }
              placeholder="Enter monthly rate"
            />
          </div>
        </div>
      );
    case "mode":
      return (
        <div className="space-y-4">
          <div>
            <label className="block text-gray-700 font-medium mb-3 text-sm">
              Preferred Teaching Mode
            </label>
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
              <button
                className={`py-3 px-4 rounded-lg border transition ${
                  modalData.mode === "offline"
                    ? "bg-blue-500 text-white border-blue-500"
                    : "bg-white text-gray-700 border-gray-300 hover:bg-gray-50"
                }`}
                onClick={() => onChange(section, "mode", "offline")}
              >
                In-Person
              </button>
              <button
                className={`py-3 px-4 rounded-lg border transition ${
                  modalData.mode === "online"
                    ? "bg-blue-500 text-white border-blue-500"
                    : "bg-white text-gray-700 border-gray-300 hover:bg-gray-50"
                }`}
                onClick={() => onChange(section, "mode", "online")}
              >
                Online
              </button>
              <button
                className={`py-3 px-4 rounded-lg border transition ${
                  modalData.mode === "both"
                    ? "bg-blue-500 text-white border-blue-500"
                    : "bg-white text-gray-700 border-gray-300 hover:bg-gray-50"
                }`}
                onClick={() => onChange(section, "mode", "both")}
              >
                Both
              </button>
            </div>
            {errors.mode && (
              <p className="text-red-500 text-xs mt-1">{errors.mode}</p>
            )}
          </div>
        </div>
      );
    default:
      return null;
  }
};

// Main ProfilePage Component
export default function ProfilePage() {
  const [isEditing, setIsEditing] = useState({
    title: false,
    about: false,
    subjects: false,
    teaching: false,
    education: false,
    awards: false,
    location: false,
    charges: false,
    mode: false,
  });

  const [profileData, setProfileData] = useState({
    name: "",
    title: "",
    about: "",
    subjects: [],
    teaching: [],
    education: [],
    awards: [],
    location: {
      street: "",
      city: "",
      postal_code: "",
      latitude: null,
      longitude: null,
    },
    charges: { charges_hourly: null, charges_monthly: null },
    mode: "online",
    status: "pending",
  });

  const [modalData, setModalData] = useState({
    title: "",
    about: "",
    subjects: [],
    teaching: {
      institute_name: "",
      job_title: "",
      city: "",
      state: "",
      teaching_role: "",
      period_from_month: "",
      period_from_year: "",
      period_to_month: "",
      period_to_year: "",
      currently_work_here: false,
      description: "",
    },
    education: {
      institution: "",
      from_year: "",
      to_year: "",
      degree: "",
      area_of_study: "",
      description: "",
    },
    awards: {
      title: "",
      description: "",
    },
    location: {
      street: "",
      city: "",
      postal_code: "",
      latitude: null,
      longitude: null,
    },
    charges: { charges_hourly: "", charges_monthly: "" },
    mode: "online",
  });

  const [errors, setErrors] = useState({});
  const [toast, setToast] = useState(null);
  const [loading, setLoading] = useState(true);
  const [subjects, setSubjects] = useState([]);
  const [teacherId, setTeacherId] = useState("31d34706-951a-4057-8d3c-487098876d8d"); // Hardcoded for now

  // Fetch teacher data
  useEffect(() => {
    const fetchTeacherData = async () => {
      const token = localStorage.getItem("authToken");
      if (!token) {
        setToast({
          message: "Authentication token not found. Please log in.",
          type: "error",
        });
        setLoading(false);
        return;
      }

      try {
        const response = await fetch(
          `https://api.vybtek.com/api/teachers/${teacherId}`,
          {
            method: "GET",
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
          }
        );
        if (!response.ok) throw new Error("Failed to fetch teacher data");
        const data = await response.json();
        setProfileData({
          name: data.user_id ? "User " + data.user_id.slice(0, 8) : "", // Placeholder name from user_id
          title: data.qualification || "",
          about: data.about || "",
          subjects: [], // No subjects in response, to be fetched separately if needed
          teaching: [], // No teaching data in response, to be added via form
          education: [], // No education data in response, to be added via form
          awards: [], // No awards data in response, to be added via form
          location: {
            street: data.street || "",
            city: data.city_id || "", // City ID needs mapping to name if available
            postal_code: data.postal_code || "",
            latitude: data.latitude || null,
            longitude: data.longitude || null,
          },
          charges: {
            charges_hourly: data.charges_hourly || null,
            charges_monthly: data.charges_monthly || null,
          },
          mode: data.mode || "online",
          status: data.status || "pending",
        });

        // Fetch available subjects
        const subjectsResponse = await fetch(
          `https://api.vybtek.com/api/subjects`,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );
        const subjectsData = await subjectsResponse.json();
        setSubjects(subjectsData.data || []);
      } catch (error) {
        setToast({ message: error.message || "Failed to load data.", type: "error" });
      } finally {
        setLoading(false);
      }
    };

    fetchTeacherData();
  }, [teacherId]);

  const handleEditToggle = useCallback(
    (section) => {
      setIsEditing((prev) => ({ ...prev, [section]: !prev[section] }));
      setErrors({});

      if (!isEditing[section]) {
        setModalData((prev) => {
          if (
            section === "teaching" ||
            section === "education" ||
            section === "awards"
          ) {
            return { ...prev, [section]: { ...prev[section] } };
          } else if (section === "location") {
            return {
              ...prev,
              location: { ...profileData.location },
            };
          } else if (section === "charges") {
            return {
              ...prev,
              charges: { ...profileData.charges },
            };
          } else if (section === "subjects") {
            return {
              ...prev,
              subjects: profileData.subjects.map((s) => s.id) || [],
            };
          } else {
            return { ...prev, [section]: profileData[section] || "" };
          }
        });
      }
    },
    [isEditing, profileData]
  );

  const handleModalChange = useCallback(
    (section, field, value) => {
      setModalData((prev) => {
        if (
          typeof prev[section] === "object" &&
          !Array.isArray(prev[section])
        ) {
          return {
            ...prev,
            [section]: { ...prev[section], [field]: value },
          };
        }
        return { ...prev, [section]: value };
      });

      const error = validateField(section, field, value, modalData);
      setErrors((prev) => ({ ...prev, [field]: error }));
    },
    [modalData]
  );

  const handleSave = useCallback(
    async (section) => {
      const sectionErrors = {};
      const token = localStorage.getItem("authToken");
      if (!token || !teacherId) {
        setToast({ message: "Authentication error", type: "error" });
        return;
      }

      if (section === "title")
        sectionErrors.title = validateField(
          "title",
          "title",
          modalData.title,
          modalData
        );
      else if (section === "about")
        sectionErrors.about = validateField(
          "about",
          "about",
          modalData.about,
          modalData
        );
      else if (section === "subjects")
        sectionErrors.subjects = validateField(
          "subjects",
          "subjects",
          modalData.subjects,
          modalData
        );
      else if (section === "teaching") {
        sectionErrors.institute_name = validateField(
          "teaching",
          "institute_name",
          modalData.teaching.institute_name,
          modalData
        );
        sectionErrors.job_title = validateField(
          "teaching",
          "job_title",
          modalData.teaching.job_title,
          modalData
        );
        sectionErrors.city = validateField(
          "teaching",
          "city",
          modalData.teaching.city,
          modalData
        );
        sectionErrors.state = validateField(
          "teaching",
          "state",
          modalData.teaching.state,
          modalData
        );
        sectionErrors.teaching_role = validateField(
          "teaching",
          "teaching_role",
          modalData.teaching.teaching_role,
          modalData
        );
        sectionErrors.period_from_month = validateField(
          "teaching",
          "period_from_month",
          modalData.teaching.period_from_month,
          modalData
        );
        sectionErrors.period_from_year = validateField(
          "teaching",
          "period_from_year",
          modalData.teaching.period_from_year,
          modalData
        );
        if (!modalData.teaching.currently_work_here) {
          sectionErrors.period_to_month = validateField(
            "teaching",
            "period_to_month",
            modalData.teaching.period_to_month,
            modalData
          );
          sectionErrors.period_to_year = validateField(
            "teaching",
            "period_to_year",
            modalData.teaching.period_to_year,
            modalData
          );
        }
      } else if (section === "education") {
        sectionErrors.institution = validateField(
          "education",
          "institution",
          modalData.education.institution,
          modalData
        );
        sectionErrors.from_year = validateField(
          "education",
          "from_year",
          modalData.education.from_year,
          modalData
        );
        sectionErrors.to_year = validateField(
          "education",
          "to_year",
          modalData.education.to_year,
          modalData
        );
      } else if (section === "awards") {
        sectionErrors.title = validateField(
          "awards",
          "title",
          modalData.awards.title,
          modalData
        );
      } else if (section === "location")
        sectionErrors.street = validateField(
          "location",
          "street",
          modalData.location.street,
          modalData
        );
      else if (section === "charges")
        sectionErrors.charges_hourly = validateField(
          "charges",
          "charges_hourly",
          modalData.charges.charges_hourly,
          modalData
        );
      else if (section === "mode")
        sectionErrors.mode = validateField(
          "mode",
          "mode",
          modalData.mode,
          modalData
        );

      const hasErrors = Object.values(sectionErrors).some((error) => error);
      if (hasErrors) {
        setErrors(sectionErrors);
        setToast({
          message: "Please fix the errors before saving.",
          type: "error",
        });
        return;
      }

      try {
        let updatedData;
        if (section === "teaching") {
          updatedData = await addTeachingExperience(
            teacherId,
            modalData.teaching,
            token
          );
          setProfileData((prev) => ({
            ...prev,
            teaching: [...prev.teaching, updatedData],
          }));
        } else if (section === "education") {
          updatedData = await addEducation(teacherId, modalData.education, token);
          setProfileData((prev) => ({
            ...prev,
            education: [...prev.education, updatedData],
          }));
        } else if (section === "awards") {
          updatedData = await addAward(teacherId, modalData.awards, token);
          setProfileData((prev) => ({
            ...prev,
            awards: [...prev.awards, updatedData],
          }));
        } else if (section === "subjects") {
          updatedData = await updateSubjects(
            teacherId,
            modalData.subjects,
            token
          );
          setProfileData((prev) => ({
            ...prev,
            subjects: updatedData.subjects || [],
          }));
        } else {
          const payload =
            section === "location"
              ? { ...modalData.location }
              : section === "charges"
              ? { ...modalData.charges }
              : { [section]: modalData[section] };
          updatedData = await updateTeacherProfile(teacherId, payload, token);
          setProfileData((prev) => ({ ...prev, ...updatedData }));
        }
        setToast({
          message: `${
            section.charAt(0).toUpperCase() + section.slice(1)
          } updated successfully!`,
          type: "success",
        });
      } catch (error) {
        setToast({ message: error.message, type: "error" });
      } finally {
        handleEditToggle(section);
      }
    },
    [modalData, handleEditToggle, teacherId]
  );

  const copyToClipboard = useCallback(() => {
    navigator.clipboard.writeText(
      "https://www.addisedu.com/tutor/arpit-sharma"
    );
    setToast({ message: "Profile link copied to clipboard!", type: "success" });
  }, []);

  return (
    <div className="min-h-screen bg-gray-50 mt-20 flex flex-col md:flex-row font-sans antialiased">
      <div className="flex-1 p-4 md:p-8 max-w-4xl mx-auto w-full">
        {loading ? (
          <p>Loading...</p>
        ) : (
          <>
            <ProfileHeader
              name={profileData.name}
              title={profileData.title}
              onEdit={handleEditToggle}
            />

            <SectionCard
              title="About"
              sectionKey="about"
              onEdit={handleEditToggle}
            >
              <p className="text-gray-600 whitespace-pre-line">
                {profileData.about}
              </p>
            </SectionCard>

            <SectionCard
              title="Subjects"
              sectionKey="subjects"
              onEdit={handleEditToggle}
            >
              <div className="flex flex-wrap gap-2">
                {profileData.subjects.map((subject) => (
                  <span
                    key={subject.id}
                    className="px-3 py-1.5 bg-blue-50 text-blue-600 rounded-full text-sm"
                  >
                    {subject.name}
                  </span>
                ))}
              </div>
            </SectionCard>

            <SectionCard
              title="Teaching Experience"
              sectionKey="teaching"
              onEdit={handleEditToggle}
            >
              <div className="space-y-6">
                {profileData.teaching.length > 0 ? (
                  profileData.teaching.map((exp, index) => (
                    <ExperienceItem
                      key={exp.id}
                      title={`${exp.job_title} at ${exp.institute_name}`}
                      subtitle={`${exp.city}, ${exp.state} • ${exp.teaching_role}`}
                      period={`${exp.period_from_month} ${
                        exp.period_from_year
                      } - ${
                        exp.currently_work_here
                          ? "Present"
                          : `${exp.period_to_month} ${exp.period_to_year}`
                      }`}
                      description={exp.description}
                      isLast={index === profileData.teaching.length - 1}
                    />
                  ))
                ) : (
                  <p className="text-gray-500 italic">
                    No teaching experience added
                  </p>
                )}
              </div>
            </SectionCard>

            <SectionCard
              title="Education"
              sectionKey="education"
              onEdit={handleEditToggle}
            >
              <div className="space-y-6">
                {profileData.education.length > 0 ? (
                  profileData.education.map((edu, index) => (
                    <ExperienceItem
                      key={edu.id}
                      title={edu.institution}
                      subtitle={`${edu.degree}${
                        edu.degree && edu.area_of_study ? ", " : ""
                      }${edu.area_of_study}`}
                      period={`${edu.from_year} - ${edu.to_year}`}
                      description={edu.description}
                      isLast={index === profileData.education.length - 1}
                    />
                  ))
                ) : (
                  <p className="text-gray-500 italic">
                    No education information added
                  </p>
                )}
              </div>
            </SectionCard>

            <SectionCard
              title="Awards & Certifications"
              sectionKey="awards"
              onEdit={handleEditToggle}
            >
              <div className="space-y-6">
                {profileData.awards.length > 0 ? (
                  profileData.awards.map((award, index) => (
                    <ExperienceItem
                      key={award.id}
                      title={award.title}
                      description={award.description}
                      isLast={index === profileData.awards.length - 1}
                    />
                  ))
                ) : (
                  <p className="text-gray-500 italic">
                    No awards or certifications added
                  </p>
                )}
              </div>
            </SectionCard>

            <SectionCard
              title="Location"
              sectionKey="location"
              onEdit={handleEditToggle}
            >
              <div className="flex items-start gap-3">
                <FaMapMarkerAlt className="text-blue-500 mt-1 flex-shrink-0" />
                <div>
                  <p className="text-gray-800">
                    {profileData.location.street}, {profileData.location.city}
                  </p>
                  <p className="text-gray-500 text-sm mt-1">
                    Your exact address is not shared with students
                  </p>
                </div>
              </div>
            </SectionCard>
          </>
        )}
      </div>

      <Sidebar
        profileData={profileData}
        onEdit={handleEditToggle}
        onCopy={copyToClipboard}
      />

      {Object.keys(isEditing).map((section) => (
        <Modal
          key={section}
          isOpen={isEditing[section]}
          onClose={() => handleEditToggle(section)}
          onSave={() => handleSave(section)}
          title={`Edit ${section.charAt(0).toUpperCase() + section.slice(1)}`}
        >
          <EditModalContent
            section={section}
            modalData={modalData}
            errors={errors}
            onChange={handleModalChange}
            subjects={subjects}
          />
        </Modal>
      ))}

      {toast && (
        <Toast
          message={toast.message}
          type={toast.type}
          onClose={() => setToast(null)}
        />
      )}
    </div>
  );
}






const API_BASE_URL = "https://api.vybtek.com/api";

const getToken = () => {
  const token = localStorage.getItem("authToken");
  if (!token) {
    throw new Error("Authentication token not found. Please log in.");
  }
  return token;
};

export const fetchTeacherProfile = async (teacherId) => {
  const token = getToken();
  try {
    const response = await fetch(`${API_BASE_URL}/teachers/${teacherId}`, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
    });
    if (!response.ok)
      throw new Error(`Failed to fetch teacher profile: ${response.status}`);
    return await response.json();
  } catch (error) {
    throw new Error(error.message || "An error occurred while fetching data");
  }
};

export const updateTeacherProfile = async (teacherId, data) => {
  const token = getToken();
  try {
    const response = await fetch(`${API_BASE_URL}/teachers/${teacherId}`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${token}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });
    if (!response.ok) throw new Error("Failed to update teacher profile");
    return await response.json();
  } catch (error) {
    throw new Error(
      error.message || "An error occurred while updating profile"
    );
  }
};

export const addTeachingExperience = async (teacherId, data) => {
  const token = getToken();
  try {
    const response = await fetch(
      `${API_BASE_URL}/teacher-experiences/teacher/${teacherId}`,
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      }
    );
    if (!response.ok) throw new Error("Failed to add teaching experience");
    return await response.json();
  } catch (error) {
    throw new Error(
      error.message || "An error occurred while adding experience"
    );
  }
};

export const addEducation = async (teacherId, data) => {
  const token = getToken();
  try {
    const response = await fetch(
      `${API_BASE_URL}/teachers/${teacherId}/education`,
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      }
    );
    if (!response.ok) throw new Error("Failed to add education");
    return await response.json();
  } catch (error) {
    throw new Error(
      error.message || "An error occurred while adding education"
    );
  }
};

export const addAward = async (teacherId, data) => {
  const token = getToken();
  try {
    const token = getToken();
    const response = await fetch(
      `${API_BASE_URL}/teachers/${teacherId}/awards`,
      {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      }
    );
    if (!response.ok) throw new Error("Failed to add award");
    return await response.json();
  } catch (error) {
    throw new Error(error.message || "An error occurred while adding award");
  }
};

export const updateSubjects = async (teacherId, subjectIds) => {
  const token = getToken();
  try {
    const response = await fetch(
      `${API_BASE_URL}/subjects${teacherId}`,
      {
        method: "PUT",
        headers: {
          Authorization: `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ subject_ids: subjectIds }),
      }
    );
    if (!response.ok) throw new Error("Failed to update subjects");
    return await response.json();
  } catch (error) {
    throw new Error(
      error.message || "An error occurred while updating subjects"
    );
  }
};


















"use client";
import React, { useState, useEffect, useRef } from "react";
import {
  FaSchool,
  FaBookOpen,
  FaCalendarAlt,
  FaHome,
  FaMapMarkerAlt,
  FaGenderless,
  FaBriefcase,
  FaCamera,
  FaInfoCircle,
} from "react-icons/fa";
import { useRouter } from "next/navigation";

const TutorSteps = ({ initialData, authToken }) => {
  const router = useRouter();
  const userId = localStorage.getItem("user_id") || initialData.user_id || "";
  const [step, setStep] = useState(3);
  const [formData, setFormData] = useState({
    street: "",
    city_id: "",
    postal_code: "",
    latitude: "",
    longitude: "",
    gender: "",
    dob: new Date(),
    mode: "",
    charges_monthly: "",
    charges_hourly: "",
    about: "",
    profile_photo: null,
    educations: [],
    experiences: [],
    categories: [],
    subjects: [],
    preferred_classes: [],
    ...initialData,
  });
  const [educationForm, setEducationForm] = useState({
    institution: "",
    from_year: "",
    to_year: "",
    degree: "",
    area_of_study: "",
    description: "",
  });
  const [experienceForm, setExperienceForm] = useState({
    institute_name: "",
    job_title: "",
    city: "",
    state: "",
    teaching_role: "",
    period_from_month: "",
    period_from_year: "",
    period_to_month: "",
    period_to_year: "",
    currently_work_here: false,
    description: "",
  });
  const [errors, setErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [apiError, setApiError] = useState(null);
  const [successMessage, setSuccessMessage] = useState(null);
  const [modalVisible, setModalVisible] = useState({
    education: false,
    experience: false,
  });
  const [editingIndex, setEditingIndex] = useState({
    education: null,
    experience: null,
  });
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [availableCategories, setAvailableCategories] = useState([]);
  const [availableSubjects, setAvailableSubjects] = useState([]);
  const [availableClasses, setAvailableClasses] = useState([]);
  const [teacherId, setTeacherId] = useState(userId);
  const [cities, setCities] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [isCityDropdownOpen, setIsCityDropdownOpen] = useState(false);
  const [isExperienceCityDropdownOpen, setIsExperienceCityDropdownOpen] =
    useState(false);
  const fadeAnim = useRef({ opacity: 0 });

  useEffect(() => {
    const fetchOptions = async () => {
      try {
        const [categoriesRes, subjectsRes, classesRes, citiesRes] =
          await Promise.all([
            fetch("https://api.vybtek.com/api/categories", {
              headers: { Authorization: `Bearer ${authToken}` },
            }),
            fetch("https://api.vybtek.com/api/subjects", {
              headers: { Authorization: `Bearer ${authToken}` },
            }),
            fetch("https://api.vybtek.com/api/preferred-classes", {
              headers: { Authorization: `Bearer ${authToken}` },
            }),
            fetch("https://api.vybtek.com/api/cities", {
              headers: { Authorization: `Bearer ${authToken}` },
            }),
          ]);
        const [categoriesData, subjectsData, classesData, citiesData] =
          await Promise.all([
            categoriesRes.json(),
            subjectsRes.json(),
            classesRes.json(),
            citiesRes.json(),
          ]);
        setAvailableCategories(categoriesData.data || []);
        setAvailableSubjects(subjectsData.data || []);
        setAvailableClasses(classesData.data || []);
        setCities(citiesData.data || []);
      } catch (error) {
        setApiError("Failed to load categories, subjects, classes, or cities.");
      }
    };
    fetchOptions();

    const animation = setInterval(() => {
      fadeAnim.current = { opacity: fadeAnim.current.opacity + 0.1 };
      if (fadeAnim.current.opacity >= 1) clearInterval(animation);
    }, 30);
    return () => clearInterval(animation);
  }, [step, authToken]);

  function getProfilePhotoPreview() {
    if (!formData.profile_photo) return null;
    if (formData.profile_photo instanceof File) {
      return URL.createObjectURL(formData.profile_photo);
    }
    if (
      typeof formData.profile_photo === "string" &&
      formData.profile_photo.length > 0
    ) {
      return formData.profile_photo;
    }
    return null;
  }

  const validateStep3 = () => {
    const newErrors = {};
    if (!formData.street.trim())
      newErrors.street = "Street address is required";
    if (!formData.city_id) newErrors.city_id = "City is required";
    if (!formData.postal_code.trim())
      newErrors.postal_code = "Postal code is required";
    else if (!/^\d{6}$/.test(formData.postal_code))
      newErrors.postal_code = "Postal code must be 6 digits";
    if (!formData.latitude || isNaN(formData.latitude))
      newErrors.latitude = "Valid latitude is required";
    if (!formData.longitude || isNaN(formData.longitude))
      newErrors.longitude = "Valid longitude is required";
    if (!formData.gender) newErrors.gender = "Gender is required";
    if (!formData.dob) newErrors.dob = "Date of Birth is required";
    if (!formData.mode) newErrors.mode = "Teaching mode is required";
    if (!formData.charges_monthly || formData.charges_monthly <= 0)
      newErrors.charges_monthly = "Monthly charges must be positive";
    if (!formData.charges_hourly || formData.charges_hourly <= 0)
      newErrors.charges_hourly = "Hourly charges must be positive";
    if (!formData.about.trim()) newErrors.about = "About section is required";
    // Optional: Make profile photo required
    // if (!formData.profile_photo) newErrors.profile_photo = "Profile photo is required";
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const validateStep4 = () => true;
  const validateStep5 = () => true;
  const validateStep6 = () => {
    const newErrors = {};
    if (formData.categories.length === 0)
      newErrors.categories = "At least one category is required";
    if (formData.subjects.length === 0)
      newErrors.subjects = "At least one subject is required";
    if (formData.preferred_classes.length === 0)
      newErrors.preferred_classes = "At least one preferred class is required";
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const validateEducationForm = () => {
    const newErrors = {};
    if (!educationForm.institution.trim())
      newErrors.institution = "Institution is required";
    if (!educationForm.from_year) newErrors.from_year = "From year is required";
    else if (
      isNaN(educationForm.from_year) ||
      educationForm.from_year < 1900 ||
      educationForm.from_year > new Date().getFullYear()
    ) {
      newErrors.from_year = "Invalid From year";
    }
    if (!educationForm.to_year) newErrors.to_year = "To year is required";
    else if (
      isNaN(educationForm.to_year) ||
      educationForm.to_year < 1900 ||
      educationForm.to_year > new Date().getFullYear() + 1
    ) {
      newErrors.to_year = "Invalid To year";
    }
    if (!educationForm.degree.trim()) newErrors.degree = "Degree is required";
    if (
      educationForm.from_year &&
      educationForm.to_year &&
      parseInt(educationForm.from_year) > parseInt(educationForm.to_year)
    ) {
      newErrors.to_year = "To year must be after From year";
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const validateExperienceForm = () => {
    const newErrors = {};
    if (!experienceForm.institute_name.trim())
      newErrors.institute_name = "Institute name is required";
    if (!experienceForm.job_title.trim())
      newErrors.job_title = "Job title is required";
    if (!experienceForm.city.trim()) newErrors.city = "City is required";
    if (!experienceForm.state.trim()) newErrors.state = "State is required";
    if (!experienceForm.teaching_role.trim())
      newErrors.teaching_role = "Teaching role is required";
    if (!experienceForm.period_from_month)
      newErrors.period_from_month = "From month is required";
    if (!experienceForm.period_from_year)
      newErrors.period_from_year = "From year is required";
    if (!experienceForm.currently_work_here) {
      if (!experienceForm.period_to_month)
        newErrors.period_to_month = "To month is required";
      if (!experienceForm.period_to_year)
        newErrors.period_to_year = "To year is required";
      if (
        experienceForm.period_from_year &&
        experienceForm.period_to_year &&
        parseInt(experienceForm.period_from_year) >
          parseInt(experienceForm.period_to_year)
      ) {
        newErrors.period_to_year = "To year must be after From year";
      }
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleInputChange = (field, value) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
    setErrors((prev) => ({ ...prev, [field]: null }));
  };

  const handleEducationChange = (field, value) => {
    const parsedValue = field.includes("year")
      ? value
        ? parseInt(value)
        : ""
      : value;
    setEducationForm((prev) => ({ ...prev, [field]: parsedValue }));
    setErrors((prev) => ({ ...prev, [field]: null }));
  };

  const handleExperienceChange = (field, value) => {
    const parsedValue = field.includes("year")
      ? value
        ? parseInt(value)
        : ""
      : value;
    setExperienceForm((prev) => ({ ...prev, [field]: parsedValue }));
    setErrors((prev) => ({ ...prev, [field]: null }));
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setFormData((prev) => ({
        ...prev,
        profile_photo: file,
      }));
      setSuccessMessage("Profile image selected");
    }
  };

  const saveEducation = async () => {
    if (validateEducationForm() && teacherId) {
      setIsLoading(true);
      try {
        const response = await fetch(
          "https://api.vybtek.com/api/teacher-educations",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${authToken}`,
            },
            body: JSON.stringify({
              teacher_id: teacherId,
              ...educationForm,
              from_year: parseInt(educationForm.from_year),
              to_year: parseInt(educationForm.to_year),
            }),
          }
        );
        if (!response.ok)
          throw new Error(
            (await response.json()).error || "Failed to save education"
          );
        const savedEducation = await response.json();
        setFormData((prev) => ({
          ...prev,
          educations: [
            ...prev.educations,
            savedEducation.data || educationForm,
          ],
        }));
        setSuccessMessage("Education saved successfully");
        resetEducationForm();
      } catch (error) {
        setApiError(
          error.message || "Failed to save education. Please try again."
        );
      } finally {
        setIsLoading(false);
      }
    } else {
      setApiError(
        "Please complete all required fields or create a teacher profile first."
      );
    }
  };

  const saveExperience = async () => {
    if (validateExperienceForm() && teacherId) {
      setIsLoading(true);
      try {
        const response = await fetch(
          "https://api.vybtek.com/api/teacher-experiences",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${authToken}`,
            },
            body: JSON.stringify({
              teacher_id: teacherId,
              ...experienceForm,
              period_from_year: parseInt(experienceForm.period_from_year),
              period_to_year: experienceForm.period_to_year
                ? parseInt(experienceForm.period_to_year)
                : null,
            }),
          }
        );
        if (!response.ok)
          throw new Error(
            (await response.json()).error || "Failed to save experience"
          );
        const savedExperience = await response.json();
        setFormData((prev) => ({
          ...prev,
          experiences: [
            ...prev.experiences,
            savedExperience.data || experienceForm,
          ],
        }));
        setSuccessMessage("Experience saved successfully");
        resetExperienceForm();
      } catch (error) {
        setApiError(
          error.message || "Failed to save experience. Please try again."
        );
      } finally {
        setIsLoading(false);
      }
    } else {
      setApiError(
        "Please complete all required fields or create a teacher profile first."
      );
    }
  };

  const handleEditEducation = (index) => {
    setEducationForm(formData.educations[index]);
    setEditingIndex((prev) => ({ ...prev, education: index }));
    setModalVisible((prev) => ({ ...prev, education: true }));
  };

  const handleEditExperience = (index) => {
    setExperienceForm(formData.experiences[index]);
    setEditingIndex((prev) => ({ ...prev, experience: index }));
    setModalVisible((prev) => ({ ...prev, experience: true }));
  };

  const handleDeleteEducation = (index) => {
    setFormData((prev) => ({
      ...prev,
      educations: prev.educations.filter((_, i) => i !== index),
    }));
    setSuccessMessage("Education deleted");
  };

  const handleDeleteExperience = (index) => {
    setFormData((prev) => ({
      ...prev,
      experiences: prev.experiences.filter((_, i) => i !== index),
    }));
    setSuccessMessage("Experience deleted");
  };

  const resetEducationForm = () => {
    setEducationForm({
      institution: "",
      from_year: "",
      to_year: "",
      degree: "",
      area_of_study: "",
      description: "",
    });
    setModalVisible((prev) => ({ ...prev, education: false }));
    setEditingIndex((prev) => ({ ...prev, education: null }));
    setErrors({});
  };

  const resetExperienceForm = () => {
    setExperienceForm({
      institute_name: "",
      job_title: "",
      city: "",
      state: "",
      teaching_role: "",
      period_from_month: "",
      period_from_year: "",
      period_to_month: "",
      period_to_year: "",
      currently_work_here: false,
      description: "",
    });
    setModalVisible((prev) => ({ ...prev, experience: false }));
    setEditingIndex((prev) => ({ ...prev, experience: null }));
    setErrors({});
  };

  const handleNext = async () => {
    setApiError(null);
    setSuccessMessage(null);

    if (step === 3 && !validateStep3()) {
      setApiError("Please complete all personal details");
      return;
    }
    if (step === 6 && !validateStep6()) {
      setApiError(
        "Please select at least one category, subject, and preferred class"
      );
      return;
    }

    if (step === 3) {
      setIsLoading(true);
      try {
        const formDataPayload = new FormData();
        formDataPayload.append("user_id", userId);
        formDataPayload.append("street", formData.street.trim() || "");
        formDataPayload.append("city_id", formData.city_id || "");
        formDataPayload.append(
          "postal_code",
          formData.postal_code.trim() || ""
        );
        formDataPayload.append("latitude", formData.latitude || "");
        formDataPayload.append("longitude", formData.longitude || "");
        formDataPayload.append("gender", formData.gender || "");
        formDataPayload.append(
          "dob",
          formData.dob ? formData.dob.toLocaleDateString("en-GB") : ""
        );
        formDataPayload.append("mode", formData.mode || "");
        formDataPayload.append(
          "charges_monthly",
          formData.charges_monthly || "0"
        );
        formDataPayload.append(
          "charges_hourly",
          formData.charges_hourly || "0"
        );
        formDataPayload.append("about", formData.about.trim() || "");
        if (formData.profile_photo instanceof File) {
          formDataPayload.append("profile_photo", formData.profile_photo);
        } else if (typeof formData.profile_photo === "string") {
          // If profile_photo is a URL, you might want to skip or handle it differently
          // Depending on your backend, you may not need to send it if unchanged
        }

        const tutorResponse = await fetch(
          "https://api.vybtek.com/api/teachers",
          {
            method: "POST",
            headers: { Authorization: `Bearer ${authToken}` },
            body: formDataPayload,
          }
        );
        const tutorData = await tutorResponse.json();
        if (!tutorResponse.ok)
          throw new Error(
            tutorData.message || "Failed to create tutor profile"
          );
        setTeacherId(tutorData.id);
        setFormData((prev) => ({
          ...prev,
          profile_photo: tutorData.profile_photo_url || prev.profile_photo, // Update with server-provided URL
        }));
        setSuccessMessage("Teacher profile created successfully!");
      } catch (error) {
        setApiError(
          error.message || "Failed to save teacher profile. Please try again."
        );
        return;
      } finally {
        setIsLoading(false);
      }
    }

    if (step < 6) {
      setStep(step + 1);
      return;
    }

    setIsLoading(true);
    try {
      const teacher_id = teacherId;
      if (!teacher_id)
        throw new Error(
          "Teacher profile not created. Please complete Step 3 first."
        );

      for (const category_id of formData.categories) {
        const response = await fetch(
          "https://api.vybtek.com/api/teacher-categories",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${authToken}`,
            },
            body: JSON.stringify({ teacher_id, category_id }),
          }
        );
        if (!response.ok)
          throw new Error(
            (await response.json()).error || "Failed to save category"
          );
      }

      for (const subject_id of formData.subjects) {
        const response = await fetch(
          "https://api.vybtek.com/api/teacher-subjects",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${authToken}`,
            },
            body: JSON.stringify({ teacher_id, subject_id }),
          }
        );
        if (!response.ok)
          throw new Error(
            (await response.json()).error || "Failed to save subject"
          );
      }

      for (const preferred_class_id of formData.preferred_classes) {
        const response = await fetch(
          "https://api.vybtek.com/api/teacher-preferred-classes",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${authToken}`,
            },
            body: JSON.stringify({ teacher_id, preferred_class_id }),
          }
        );
        if (!response.ok)
          throw new Error(
            (await response.json()).error || "Failed to save preferred class"
          );
      }

      setSuccessMessage("Profile saved successfully! Redirecting...");
      setTimeout(() => router.push("/profile"), 2000);
    } catch (error) {
      setApiError(error.message || "Failed to save profile. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const renderInput = (
    label,
    field,
    type = "text",
    icon,
    placeholder,
    required = true,
    handler = handleInputChange
  ) => (
    <div className="mb-4">
      <label className="text-sm text-gray-900 font-medium mb-2 block">
        {label} {required && <span className="text-red-500">*</span>}
      </label>
      <div
        className={`flex items-center border ${
          errors[field] ? "border-red-500" : "border-gray-300"
        } rounded-full px-4 py-2 bg-white`}
      >
        {icon}
        <input
          type={type}
          placeholder={placeholder}
          value={formData[field]}
          onChange={(e) => handler(field, e.target.value)}
          className="w-full outline-none bg-transparent"
          disabled={isLoading}
        />
      </div>
      {errors[field] && (
        <p className="text-red-500 text-sm mt-1">{errors[field]}</p>
      )}
    </div>
  );

  const renderSelect = (
    label,
    field,
    options,
    icon,
    required = true,
    handler = handleInputChange
  ) => (
    <div className="mb-4">
      <label className="text-sm text-gray-900 font-medium mb-2 block">
        {label} {required && <span className="text-red-500">*</span>}
      </label>
      <div
        className={`flex items-center border ${
          errors[field] ? "border-red-500" : "border-gray-300"
        } rounded-lg px-4 py-2 bg-white`}
      >
        {icon}
        <select
          value={formData[field]}
          onChange={(e) => handler(field, e.target.value)}
          className="w-full outline-none bg-transparent"
          disabled={isLoading}
        >
          <option value="">Select {label.toLowerCase()}</option>
          {options.map((opt) => (
            <option key={opt.value} value={opt.value}>
              {opt.label}
            </option>
          ))}
        </select>
      </div>
      {errors[field] && (
        <p className="text-red-500 text-sm mt-1">{errors[field]}</p>
      )}
    </div>
  );

  const renderMultiSelect = (label, field, options, icon) => (
    <div className="mb-4">
      <label className="text-sm text-gray-900 font-medium mb-2 block">
        {label} <span className="text-red-500">*</span>
      </label>
      <div
        className={`flex items-center border ${
          errors[field] ? "border-red-500" : "border-gray-300"
        } rounded-lg px-4 py-2 bg-white`}
      >
        {icon}
        <select
          multiple
          value={formData[field]}
          onChange={(e) =>
            handleInputChange(
              field,
              Array.from(e.target.selectedOptions, (option) => option.value)
            )
          }
          className="w-full outline-none bg-transparent"
          disabled={isLoading}
        >
          {options.map((opt) => (
            <option key={opt.id} value={opt.id}>
              {opt.name}
            </option>
          ))}
        </select>
      </div>
      {errors[field] && (
        <p className="text-red-500 text-sm mt-1">{errors[field]}</p>
      )}
    </div>
  );

  const renderCityDropdown = (
    label,
    field,
    value,
    handler,
    isOpen,
    setIsOpen
  ) => (
    <div className="mb-4 relative">
      <label className="text-sm text-gray-900 font-medium mb-2 block">
        {label} <span className="text-red-500">*</span>
      </label>
      <div
        className={`flex items-center justify-between border ${
          errors[field] ? "border-red-500" : "border-gray-300"
        } rounded-full px-4 py-2 bg-white cursor-pointer`}
        onClick={() => setIsOpen(!isOpen)}
      >
        <span className={!value ? "text-gray-500" : "text-gray-800"}>
          {value
            ? cities.find((city) => city.id === value)?.name ||
              value ||
              "Select City"
            : "Select City"}
        </span>
        <svg
          className="w-4 h-4 text-gray-400"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="M19 9l-7 7-7-7"
          ></path>
        </svg>
      </div>
      {isOpen && (
        <div className="absolute mt-1 w-full bg-white border border-gray-300 rounded-lg shadow-lg z-10">
          <div className="p-2 border-b">
            <div className="flex items-center border border-gray-300 rounded-full px-4 py-2 bg-gray-50">
              <svg
                className="w-5 h-5 text-gray-500 mr-2"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                ></path>
              </svg>
              <input
                type="text"
                placeholder="Search city..."
                className="w-full outline-none bg-transparent"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                onClick={(e) => e.stopPropagation()}
              />
            </div>
          </div>
          <div className="max-h-40 overflow-y-auto">
            {filteredCities.length > 0 ? (
              filteredCities.map((city) => (
                <div
                  key={city.id}
                  className="px-4 py-2 hover:bg-gray-100 cursor-pointer"
                  onClick={() => {
                    handler(field, city.id); // Changed to use city.id
                    setIsOpen(false);
                    setSearchTerm("");
                  }}
                >
                  {city.name}
                </div>
              ))
            ) : (
              <div className="px-4 py-2 text-gray-500">No cities found</div>
            )}
          </div>
        </div>
      )}
      {errors[field] && (
        <p className="text-red-500 text-sm mt-1">{errors[field]}</p>
      )}
    </div>
  );

  const filteredCities = cities.filter((city) =>
    city.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const renderProfilePhotoSection = () => (
    <div className="flex flex-col items-center mb-4">
      <label className="w-24 h-24 rounded-full border border-gray-300 overflow-hidden cursor-pointer relative group">
        <input
          type="file"
          accept="image/*"
          onChange={handleImageChange}
          className="hidden"
          disabled={isLoading}
        />
        {getProfilePhotoPreview() ? (
          <img
            src={getProfilePhotoPreview()}
            alt="Profile"
            className="w-full h-full object-cover"
          />
        ) : (
          <div className="w-full h-full bg-gray-200 flex justify-center items-center flex-col">
            <FaCamera className="w-8 h-8 text-blue-600" />
            <span className="text-xs text-gray-600">Add Photo</span>
          </div>
        )}
      </label>
      <span className="text-sm text-gray-600 mt-2">
        Photo will be saved with your profile
      </span>
      <span className="text-base text-gray-900 mt-2">
        {formData.name || "Your Name"}
      </span>
    </div>
  );

  const renderStep3 = () => (
    <div className="mb-6">
      <div className="flex items-center mb-4">
        <FaHome className="w-6 h-6 text-blue-600" />
        <h3 className="text-lg font-semibold text-gray-900 ml-2">
          Personal Details
        </h3>
      </div>
      {renderInput(
        "Street Address",
        "street",
        "text",
        <FaHome className="w-5 h-5 text-gray-600 mr-2" />,
        "Enter street address"
      )}
      {renderCityDropdown(
        "City",
        "city_id",
        formData.city_id,
        handleInputChange,
        isCityDropdownOpen,
        setIsCityDropdownOpen
      )}
      {renderInput(
        "Postal Code",
        "postal_code",
        "text",
        <FaMapMarkerAlt className="w-5 h-5 text-gray-600 mr-2" />,
        "Enter postal code"
      )}
      {renderInput(
        "Latitude",
        "latitude",
        "number",
        <FaMapMarkerAlt className="w-5 h-5 text-gray-600 mr-2" />,
        "Enter latitude (e.g., 19.0760)"
      )}
      {renderInput(
        "Longitude",
        "longitude",
        "number",
        <FaMapMarkerAlt className="w-5 h-5 text-gray-600 mr-2" />,
        "Enter longitude (e.g., 72.8777)"
      )}
      {renderSelect(
        "Gender",
        "gender",
        [
          { value: "Male", label: "Male" },
          { value: "Female", label: "Female" },
          { value: "Other", label: "Other" },
        ],
        <FaGenderless className="w-5 h-5 text-gray-600 mr-2" />
      )}
      <div className="mb-4">
        <label className="text-sm text-gray-900 font-medium mb-2 block">
          Date of Birth <span className="text-red-500">*</span>
        </label>
        <div
          className={`flex items-center border ${
            errors.dob ? "border-red-500" : "border-gray-300"
          } rounded-full px-4 py-2 bg-white cursor-pointer`}
          onClick={() => setShowDatePicker(true)}
        >
          <FaCalendarAlt className="w-5 h-5 text-gray-600 mr-2" />
          <input
            type="text"
            value={formData.dob.toLocaleDateString("en-GB")}
            readOnly
            className="w-full outline-none bg-transparent"
            disabled={isLoading}
          />
        </div>
        {showDatePicker && (
          <input
            type="date"
            value={formData.dob.toISOString().split("T")[0]}
            onChange={(e) => handleInputChange("dob", new Date(e.target.value))}
            className="mt-2 w-full border border-gray-300 rounded-lg p-2"
            onBlur={() => setShowDatePicker(false)}
          />
        )}
        {errors.dob && (
          <p className="text-red-500 text-sm mt-1">{errors.dob}</p>
        )}
      </div>
      {renderSelect(
        "Teaching Mode",
        "mode",
        [
          { value: "online", label: "Online" },
          { value: "offline", label: "Offline" },
          { value: "both", label: "Both" },
        ],
        <FaBriefcase className="w-5 h-5 text-gray-600 mr-2" />
      )}
      {renderInput(
        "Monthly Charges (INR)",
        "charges_monthly",
        "number",
        <FaBriefcase className="w-5 h-5 text-gray-600 mr-2" />,
        "Enter monthly charges"
      )}
      {renderInput(
        "Hourly Charges (INR)",
        "charges_hourly",
        "number",
        <FaBriefcase className="w-5 h-5 text-gray-600 mr-2" />,
        "Enter hourly charges"
      )}
      <div className="mb-4">
        <label className="text-sm text-gray-900 font-medium mb-2 block">
          About <span className="text-red-500">*</span>
        </label>
        <div
          className={`flex items-center border ${
            errors.about ? "border-red-500" : "border-gray-300"
          } rounded-full px-4 py-2 bg-white`}
        >
          <FaInfoCircle className="w-5 h-5 text-gray-600 mr-2" />
          <textarea
            placeholder="Tell us about yourself"
            value={formData.about}
            onChange={(e) => handleInputChange("about", e.target.value)}
            className="w-full outline-none bg-transparent resize-none"
            rows={4}
            disabled={isLoading}
          />
        </div>
        {errors.about && (
          <p className="text-red-500 text-sm mt-1">{errors.about}</p>
        )}
      </div>
      <div className="flex items-center mb-4">
        <FaCamera className="w-6 h-6 text-blue-600" />
        <h3 className="text-lg font-semibold text-gray-900 ml-2">
          Profile Photo
        </h3>
      </div>
      {renderProfilePhotoSection()}
    </div>
  );

  const renderEducationModal = () => (
    <div
      className={`fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center ${
        modalVisible.education ? "" : "hidden"
      }`}
    >
      <div className="bg-white rounded-lg p-6 max-h-[80%] w-full max-w-md overflow-y-auto">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center">
            <FaSchool className="w-6 h-6 text-blue-600" />
            <h3 className="text-lg font-semibold text-gray-900 ml-2">
              {editingIndex.education !== null
                ? "Edit Education"
                : "Add Education"}
            </h3>
          </div>
          <button
            onClick={resetEducationForm}
            className="p-2 bg-gray-100 rounded-full"
          >
            <span className="text-gray-600">✕</span>
          </button>
        </div>
        {renderInput(
          "Institution",
          "institution",
          "text",
          <FaSchool className="w-5 h-5 text-gray-600 mr-2" />,
          "Enter institution",
          true,
          handleEducationChange
        )}
        <div className="flex gap-3 mb-4">
          <div className="flex-1">
            <label className="text-sm text-gray-900 font-medium mb-2 block">
              From Year <span className="text-red-500">*</span>
            </label>
            <select
              value={educationForm.from_year}
              onChange={(e) =>
                handleEducationChange("from_year", e.target.value)
              }
              className={`w-full border ${
                errors.from_year ? "border-red-500" : "border-gray-300"
              } rounded-lg p-2`}
            >
              <option value="">Select year</option>
              {Array.from(
                { length: new Date().getFullYear() - 1900 + 1 },
                (_, i) => 1900 + i
              )
                .reverse()
                .map((year) => (
                  <option key={year} value={year}>
                    {year}
                  </option>
                ))}
            </select>
            {errors.from_year && (
              <p className="text-red-500 text-sm mt-1">{errors.from_year}</p>
            )}
          </div>
          <div className="flex-1">
            <label className="text-sm text-gray-900 font-medium mb-2 block">
              To Year <span className="text-red-500">*</span>
            </label>
            <select
              value={educationForm.to_year}
              onChange={(e) => handleEducationChange("to_year", e.target.value)}
              className={`w-full border ${
                errors.to_year ? "border-red-500" : "border-gray-300"
              } rounded-lg p-2`}
            >
              <option value="">Select year</option>
              {Array.from(
                { length: new Date().getFullYear() - 1900 + 2 },
                (_, i) => 1900 + i
              )
                .reverse()
                .map((year) => (
                  <option key={year} value={year}>
                    {year}
                  </option>
                ))}
            </select>
            {errors.to_year && (
              <p className="text-red-500 text-sm mt-1">{errors.to_year}</p>
            )}
          </div>
        </div>
        {renderInput(
          "Degree",
          "degree",
          "text",
          <FaSchool className="w-5 h-5 text-gray-600 mr-2" />,
          "Enter degree (e.g., B.Tech)",
          true,
          handleEducationChange
        )}
        {renderInput(
          "Area of Study",
          "area_of_study",
          "text",
          <FaSchool className="w-5 h-5 text-gray-600 mr-2" />,
          "Enter area of study",
          false,
          handleEducationChange
        )}
        <div className="mb-4">
          <label className="text-sm text-gray-900 font-medium mb-2 block">
            Description
          </label>
          <div className="flex items-center border border-gray-300 rounded-full px-4 py-2 bg-white">
            <FaSchool className="w-5 h-5 text-gray-600 mr-2" />
            <textarea
              placeholder="Description (optional)"
              value={educationForm.description}
              onChange={(e) =>
                handleEducationChange("description", e.target.value)
              }
              className="w-full outline-none bg-transparent resize-none"
              rows={3}
            />
          </div>
        </div>
        <div className="flex gap-3">
          <button
            onClick={saveEducation}
            disabled={isLoading}
            className={`flex-1 py-2 rounded-full transition duration-200 ${
              isLoading
                ? "bg-gray-400 cursor-not-allowed"
                : "bg-blue-600 hover:bg-blue-700"
            } text-white`}
          >
            {isLoading
              ? "Saving..."
              : editingIndex.education !== null
              ? "Update"
              : "Add"}
          </button>
          <button
            onClick={resetEducationForm}
            className="flex-1 py-2 rounded-full border border-blue-600 text-blue-600 hover:bg-blue-50"
          >
            Cancel
          </button>
        </div>
      </div>
    </div>
  );

  const renderExperienceModal = () => (
    <div
      className={`fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center ${
        modalVisible.experience ? "" : "hidden"
      }`}
    >
      <div className="bg-white rounded-lg p-6 max-h-[80%] w-full max-w-md overflow-y-auto">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center">
            <FaBriefcase className="w-6 h-6 text-blue-600" />
            <h3 className="text-lg font-semibold text-gray-900 ml-2">
              {editingIndex.experience !== null
                ? "Edit Experience"
                : "Add Experience"}
            </h3>
          </div>
          <button
            onClick={resetExperienceForm}
            className="p-2 bg-gray-100 rounded-full"
          >
            <span className="text-gray-600">✕</span>
          </button>
        </div>
        {renderInput(
          "Institute Name",
          "institute_name",
          "text",
          <FaSchool className="w-5 h-5 text-gray-600 mr-2" />,
          "Enter institute name",
          true,
          handleExperienceChange
        )}
        {renderInput(
          "Job Title",
          "job_title",
          "text",
          <FaBriefcase className="w-5 h-5 text-gray-600 mr-2" />,
          "Enter job title",
          true,
          handleExperienceChange
        )}
        {renderCityDropdown(
          "City",
          "city",
          experienceForm.city,
          handleExperienceChange,
          isExperienceCityDropdownOpen,
          setIsExperienceCityDropdownOpen
        )}
        {renderInput(
          "State",
          "state",
          "text",
          <FaMapMarkerAlt className="w-5 h-5 text-gray-600 mr-2" />,
          "Enter state",
          true,
          handleExperienceChange
        )}
        {renderInput(
          "Teaching Role",
          "teaching_role",
          "text",
          <FaBriefcase className="w-5 h-5 text-gray-600 mr-2" />,
          "Enter teaching role",
          true,
          handleExperienceChange
        )}
        <div className="flex gap-3 mb-4">
          <div className="flex-1">
            <label className="text-sm text-gray-900 font-medium mb-2 block">
              From Month <span className="text-red-500">*</span>
            </label>
            <select
              value={experienceForm.period_from_month}
              onChange={(e) =>
                handleExperienceChange("period_from_month", e.target.value)
              }
              className={`w-full border ${
                errors.period_from_month ? "border-red-500" : "border-gray-300"
              } rounded-lg p-2`}
            >
              <option value="">Select month</option>
              {[
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December",
              ].map((month) => (
                <option key={month} value={month}>
                  {month}
                </option>
              ))}
            </select>
            {errors.period_from_month && (
              <p className="text-red-500 text-sm mt-1">
                {errors.period_from_month}
              </p>
            )}
          </div>
          <div className="flex-1">
            <label className="text-sm text-gray-900 font-medium mb-2 block">
              From Year <span className="text-red-500">*</span>
            </label>
            <select
              value={experienceForm.period_from_year}
              onChange={(e) =>
                handleExperienceChange("period_from_year", e.target.value)
              }
              className={`w-full border ${
                errors.period_from_year ? "border-red-500" : "border-gray-300"
              } rounded-lg p-2`}
            >
              <option value="">Select year</option>
              {Array.from(
                { length: new Date().getFullYear() - 1900 + 1 },
                (_, i) => 1900 + i
              )
                .reverse()
                .map((year) => (
                  <option key={year} value={year}>
                    {year}
                  </option>
                ))}
            </select>
            {errors.period_from_year && (
              <p className="text-red-500 text-sm mt-1">
                {errors.period_from_year}
              </p>
            )}
          </div>
        </div>
        {!experienceForm.currently_work_here && (
          <div className="flex gap-3 mb-4">
            <div className="flex-1">
              <label className="text-sm text-gray-900 font-medium mb-2 block">
                To Month <span className="text-red-500">*</span>
              </label>
              <select
                value={experienceForm.period_to_month}
                onChange={(e) =>
                  handleExperienceChange("period_to_month", e.target.value)
                }
                className={`w-full border ${
                  errors.period_to_month ? "border-red-500" : "border-gray-300"
                } rounded-lg p-2`}
              >
                <option value="">Select month</option>
                {[
                  "January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December",
                ].map((month) => (
                  <option key={month} value={month}>
                    {month}
                  </option>
                ))}
              </select>
              {errors.period_to_month && (
                <p className="text-red-500 text-sm mt-1">
                  {errors.period_to_month}
                </p>
              )}
            </div>
            <div className="flex-1">
              <label className="text-sm text-gray-900 font-medium mb-2 block">
                To Year <span className="text-red-500">*</span>
              </label>
              <select
                value={experienceForm.period_to_year}
                onChange={(e) =>
                  handleExperienceChange("period_to_year", e.target.value)
                }
                className={`w-full border ${
                  errors.period_to_year ? "border-red-500" : "border-gray-300"
                } rounded-lg p-2`}
              >
                <option value="">Select year</option>
                {Array.from(
                  { length: new Date().getFullYear() - 1900 + 2 },
                  (_, i) => 1900 + i
                )
                  .reverse()
                  .map((year) => (
                    <option key={year} value={year}>
                      {year}
                    </option>
                  ))}
              </select>
              {errors.period_to_year && (
                <p className="text-red-500 text-sm mt-1">
                  {errors.period_to_year}
                </p>
              )}
            </div>
          </div>
        )}
        <div className="mb-4">
          <label className="flex items-center">
            <input
              type="checkbox"
              checked={experienceForm.currently_work_here}
              onChange={(e) =>
                handleExperienceChange("currently_work_here", e.target.checked)
              }
              className="mr-2"
            />
            <span className="text-sm text-gray-900">I currently work here</span>
          </label>
        </div>
        <div className="mb-4">
          <label className="text-sm text-gray-900 font-medium mb-2 block">
            Description
          </label>
          <div className="flex items-center border border-gray-300 rounded-full px-4 py-2 bg-white">
            <FaBriefcase className="w-5 h-5 text-gray-600 mr-2" />
            <textarea
              placeholder="Description (optional)"
              value={experienceForm.description}
              onChange={(e) =>
                handleExperienceChange("description", e.target.value)
              }
              className="w-full outline-none bg-transparent resize-none"
              rows={3}
            />
          </div>
        </div>
        <div className="flex gap-3">
          <button
            onClick={saveExperience}
            disabled={isLoading}
            className={`flex-1 py-2 rounded-full transition duration-200 ${
              isLoading
                ? "bg-gray-400 cursor-not-allowed"
                : "bg-blue-600 hover:bg-blue-700"
            } text-white`}
          >
            {isLoading
              ? "Saving..."
              : editingIndex.experience !== null
              ? "Update"
              : "Add"}
          </button>
          <button
            onClick={resetExperienceForm}
            className="flex-1 py-2 rounded-full border border-blue-600 text-blue-600 hover:bg-blue-50"
          >
            Cancel
          </button>
        </div>
      </div>
    </div>
  );

  const renderStep4 = () => (
    <div className="mb-6">
      <div className="flex items-center mb-4">
        <FaSchool className="w-6 h-6 text-blue-600" />
        <h3 className="text-lg font-semibold text-gray-900 ml-2">Education</h3>
      </div>
      <button
        onClick={() =>
          setModalVisible((prev) => ({ ...prev, education: true }))
        }
        className="w-full py-2 rounded-full bg-blue-600 text-white hover:bg-blue-700 mb-3"
      >
        Add Education
      </button>
      {formData.educations.length > 0 && (
        <div className="mt-3">
          {formData.educations.map((edu, index) => (
            <div
              key={index}
              className="bg-white rounded-lg p-3 mb-3 border border-gray-300"
            >
              <div className="flex justify-between items-center">
                <div className="flex-1">
                  <p className="text-sm text-gray-900 font-medium">
                    {edu.institution}
                  </p>
                  <p className="text-sm text-gray-600">
                    Degree: {edu.degree} ({edu.from_year} - {edu.to_year})
                  </p>
                  <p className="text-sm text-gray-600">
                    Area: {edu.area_of_study || "N/A"}
                  </p>
                  <p className="text-sm text-gray-600">
                    Description: {edu.description || "N/A"}
                  </p>
                </div>
                <div className="flex gap-2">
                  <button
                    onClick={() => handleEditEducation(index)}
                    className="p-2 bg-gray-100 rounded-full"
                  >
                    <span className="text-blue-600">✏️</span>
                  </button>
                  <button
                    onClick={() => handleDeleteEducation(index)}
                    className="p-2 bg-gray-100 rounded-full"
                  >
                    <span className="text-red-600">🗑️</span>
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );

  const renderStep5 = () => (
    <div className="mb-6">
      <div className="flex items-center mb-4">
        <FaBriefcase className="w-6 h-6 text-blue-600" />
        <h3 className="text-lg font-semibold text-gray-900 ml-2">Experience</h3>
      </div>
      <button
        onClick={() =>
          setModalVisible((prev) => ({ ...prev, experience: true }))
        }
        className="w-full py-2 rounded-full bg-blue-600 text-white hover:bg-blue-700 mb-3"
      >
        Add Experience
      </button>
      {formData.experiences.length > 0 && (
        <div className="mt-3">
          {formData.experiences.map((exp, index) => (
            <div
              key={index}
              className="bg-white rounded-lg p-3 mb-3 border border-gray-300"
            >
              <div className="flex justify-between items-center">
                <div className="flex-1">
                  <p className="text-sm text-gray-900 font-medium">
                    {exp.institute_name} - {exp.job_title}
                  </p>
                  <p className="text-sm text-gray-600">
                    City: {exp.city || "N/A"}, State: {exp.state}
                  </p>
                  <p className="text-sm text-gray-600">
                    Role: {exp.teaching_role}
                  </p>
                  <p className="text-sm text-gray-600">
                    Period: {exp.period_from_month} {exp.period_from_year} -{" "}
                    {exp.currently_work_here
                      ? "Present"
                      : `${exp.period_to_month} ${exp.period_to_year}`}
                  </p>
                  <p className="text-sm text-gray-600">
                    Description: {exp.description || "N/A"}
                  </p>
                </div>
                <div className="flex gap-2">
                  <button
                    onClick={() => handleEditExperience(index)}
                    className="p-2 bg-gray-100 rounded-full"
                  >
                    <span className="text-blue-600">✏️</span>
                  </button>
                  <button
                    onClick={() => handleDeleteExperience(index)}
                    className="p-2 bg-gray-100 rounded-full"
                  >
                    <span className="text-red-600">🗑️</span>
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );

  const renderStep6 = () => (
    <div className="mb-6">
      <div className="flex items-center mb-4">
        <FaBookOpen className="w-6 h-6 text-blue-600" />
        <h3 className="text-lg font-semibold text-gray-900 ml-2">
          Categories, Subjects & Classes
        </h3>
      </div>
      {renderMultiSelect(
        "Categories",
        "categories",
        availableCategories,
        <FaBookOpen className="w-5 h-5 text-gray-600 mr-2" />
      )}
      {renderMultiSelect(
        "Subjects",
        "subjects",
        availableSubjects,
        <FaBookOpen className="w-5 h-5 text-gray-600 mr-2" />
      )}
      {renderMultiSelect(
        "Preferred Classes",
        "preferred_classes",
        availableClasses,
        <FaBookOpen className="w-5 h-5 text-gray-600 mr-2" />
      )}
    </div>
  );

  return (
    <div className="flex justify-center items-center py-20 bg-gray-100 min-h-screen">
      <div className="bg-white p-8 w-full max-w-2xl rounded-lg shadow-md">
        <div className="bg-blue-600 py-6 px-4 mb-4 rounded-t-lg">
          <div className="flex items-center justify-center relative">
            <button
              onClick={() => router.push("/")}
              className="absolute left-0 p-2 bg-white/30 rounded-full"
            >
              <span className="text-white">←</span>
            </button>
            <div className="text-center">
              <h2 className="text-xl font-semibold text-white">
                Teacher Registration
              </h2>
              <p className="text-sm text-gray-200">Step {step - 2} of 4</p>
            </div>
          </div>
        </div>

        {apiError && (
          <div className="mb-4 p-3 bg-red-100 text-red-700 rounded-lg">
            {apiError}
          </div>
        )}
        {successMessage && (
          <div className="mb-4 p-3 bg-green-100 text-green-700 rounded-lg">
            {successMessage}
          </div>
        )}

        <div style={fadeAnim.current}>
          {step === 3 && renderStep3()}
          {step === 4 && renderStep4()}
          {step === 5 && renderStep5()}
          {step === 6 && renderStep6()}
          <div className="flex justify-between mt-4 gap-3">
            <button
              onClick={() => setStep(step - 1)}
              disabled={step === 3 || isLoading}
              className={`py-2 px-4 rounded-full transition duration-200 ${
                step === 3 || isLoading
                  ? "bg-gray-400 cursor-not-allowed"
                  : "bg-gray-600 hover:bg-gray-700"
              } text-white`}
            >
              Previous
            </button>
            <div className="flex gap-3">
              <button
                onClick={() => router.push("/")}
                className="py-2 px-4 rounded-full border border-blue-600 text-blue-600 hover:bg-blue-50"
              >
                Cancel
              </button>
              <button
                onClick={handleNext}
                disabled={isLoading}
                className={`py-2 px-4 rounded-full transition duration-200 ${
                  isLoading
                    ? "bg-gray-400 cursor-not-allowed"
                    : "bg-blue-600 hover:bg-blue-700"
                } text-white`}
              >
                {isLoading ? "Processing..." : step === 6 ? "Complete" : "Next"}
              </button>
            </div>
          </div>
          <hr className="my-4 border-gray-300" />
          <p className="text-center text-sm text-gray-600">
            Already have an account?{" "}
            <a href="/login" className="text-blue-600 hover:underline">
              Sign In
            </a>
          </p>
        </div>

        {renderEducationModal()}
        {renderExperienceModal()}
      </div>
    </div>
  );
};

export default TutorSteps;
